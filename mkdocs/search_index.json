{
    "docs": [
        {
            "location": "/", 
            "text": "Introduction\n\n\nThis is an attempt to re-write the official tigoPesa's API in a developer friendly way.\nthe current documentantion is written in pdf which makes it difficult to work on and hard to \nbrowse through the documentation. This is an attampt to make it easier for developers to work on this new \n exciting \nAPI. \nRead More About the tigoPesa API here\n\n\nGetting Started\n\n\nThis documentation is created using mkdocs so to run it locally you need to have python, pip and ofcourse mkdocs installed \n\n\nTo install \nmkdocs\n just run the following command\n\n\npip install mkdocs\n \n\n\nStart the live-reloading docs server.\n\n\nmkdocs serve\n \n\n\nNow you can view the documentation by just going to \n\n\nhttp://localhost:8000", 
            "title": "Home"
        }, 
        {
            "location": "/#introduction", 
            "text": "This is an attempt to re-write the official tigoPesa's API in a developer friendly way.\nthe current documentantion is written in pdf which makes it difficult to work on and hard to \nbrowse through the documentation. This is an attampt to make it easier for developers to work on this new   exciting \nAPI.  Read More About the tigoPesa API here", 
            "title": "Introduction"
        }, 
        {
            "location": "/#getting-started", 
            "text": "This documentation is created using mkdocs so to run it locally you need to have python, pip and ofcourse mkdocs installed", 
            "title": "Getting Started"
        }, 
        {
            "location": "/#to-install-mkdocs-just-run-the-following-command", 
            "text": "pip install mkdocs    Start the live-reloading docs server.  mkdocs serve    Now you can view the documentation by just going to   http://localhost:8000", 
            "title": "To install mkdocs just run the following command"
        }, 
        {
            "location": "/about/", 
            "text": "About this documentation\n\n\nThis documentation is an attempt to make the official tigoPesa API much easier for me to work on. Lots of efforts was\nspent to make this as accurate as possible. \n\n\nIf there is any error/confusion please refer to the original documents found \nhere", 
            "title": "About"
        }, 
        {
            "location": "/about/#about-this-documentation", 
            "text": "This documentation is an attempt to make the official tigoPesa API much easier for me to work on. Lots of efforts was\nspent to make this as accurate as possible.   If there is any error/confusion please refer to the original documents found  here", 
            "title": "About this documentation"
        }, 
        {
            "location": "/online_payments/", 
            "text": "Application integration guidelines for online payments\n\n\nConnectivity and communication\n\n\nThe diagram below shows a high level view of the international integration for the MFS services with the Tigo Mobile Operators in Latin-America and Africa. Integration is done via a central Tigo Secure Server hosted on Apigee. This centralized server takes care of access control, routing, requests to the corresponding Tigo operation and most importantly the secure handling of data. All communication on all the interfaces is encrypted.\n\n\n\n\n\n\n\n\nPartner\n\n\nTigo Secure Server\n\n\nOperators\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\uf0b7\n\n\nSSL\n\n\n\uf0b7\n\n\nMutal SSL\n\n\n\n\n\n\n\n\n\n\n\uf0b7\n\n\nIP Whitelisting\n\n\n\uf0b7\n\n\nIP Whitelisting\n\n\n\n\n\n\n\n\nMillicom Tigo Secure is hosted on Apigee in a minimum of two datacenters. This mission critical platform has up to 99.99% availability. The cloud environment provides load-balancing and failover across the multiple server instances.\n\n\nAll the provided services are exposed to use JSON.\n\n\nTwo main URIs are provided for integration:\n\n\nhttps://securesandbox.tigo.com/test\n environment\n\n\nhttps://secure.tigo.com/production\n environment\n\n\nAll communication with the Tigo Secure Server use HTTPS / SSL to exchange information. The Payment Authorization solution is established via one-way SSL. The international remittance deposit money service requires two-way SSL and IP whitelisting.\n\n\nIntegration steps\n\n\nThe following steps have to be carried out in order to integrate successfully with the Millicom Tigo Secure environment and the Mobile Financial Services:\n\n\n\n\n\n\nRegister with Millicom Tigo\n\n\n\n\n\n\nAcquire an Apigee API Key and secret\n\n\n\n\n\n\nExchange SSL certificates for 2-way SSL\n\n\n\n\n\n\nMake sure that MFS Accounts have been created in the respective countries and that account numbers and pin codes are known\n\n\n\n\n\n\nSubmit the IP address of the server(s) that will connect with Tigo Secure in order to whitelist\n\n\n\n\n\n\nPartner Mobile Accounts\n\n\nFor each Millicom Tigo operation with which a partner will integrate a separate MFS Account (also called mobile wallet) has to be opened. Each account is uniquely identified with either a MSISDN or username and a PIN code. For each service call interacting with the MFS Account the correct account details have to be provided in the request for the designated country.\n\n\nOpening an account the exact process depends on the country and in general involves the following steps:\n\n\n\n\nSigned NDA\n\n\n\n\nCompany to provide KYC details\n_Differs from country to country but high level is:\n\n\n\n\n\n\nBusiness Name\n\n\n\n\n\n\nBusiness License\n\n\n\n\n\n\nTax Identification Number\n\n\n\n\n\n\nStated Capital\n\n\n\n\n\n\n\n\n\n\nContact person(s) details \n ID\n\n\n\n\n\n\nBank account details of account in local bank\n\n\n\n\n\n\nDepending on the use cases and the functionality/product launched these can be broadly classified into 2 kinds of accounts:\n\n\n\n\n\n\nPre-Funded Account\n\n\n\n\n\n\nCollection Account\n\n\n\n\n\n\nPre-funded account\n \n\n\n\u2013This type of account is provided in case of integrations where the partner is required to have virtual money (e-money/local MFS currency) in advance to make transfers into the end users wallets. The local process of procuring this MFS currency (e-money) differs per operation but it usually involves depositing actual money in the local currency into the bank account designated by the Tigo operation and getting a mirror value replicated in the MFS platform (as e-money or MFS currency).\n\n\nTypical products and functionalities using this type of account are Disbursements, Remittance transfers, Transfers.\n\n\nThe settlement process is usually agreed between both entities that governs the management of the e-money and real money\n\n\nCollection Account\n \n\n\n\u2013This type of account is provided in cases where thepartner is required to collect or accumulate transfers into their accounts. The end user that has a valid account would be able to transfer e-money/MFS currency into the partner account for the intention of making payments, transfers, purchases etc.\n\n\nTypical products and functionalities using this type of account are:\n\n\nMerchant Payments, Bill payments, transfers, goods purchases.\n\n\nAs confirmed before the settlement process defined governs the movements and transfer between the collection account and the partner's bank account.\n\n\nSession Access Token\n\n\nFor each session a valid Access Token has to be requested via the GenerateAccessToken service (see section 4.3) using the API key and secret.\n\n\nThis Access Token has a limited validity period. After completing a session (either successful or unsuccessful) the access token will be invalidated. The process is shown in the next sections.\n\n\nWarning:\n You should never authenticate using the API Key and Secretdirectly from a client-side app such as a mobile app. A hacker could analyze your app and extract the credentials for malicious use even if those credentials are compiled and in binary format. [Source: Apigee]\n\n\nSystem Status heartbeat signal\n\n\nThe system status is monitored by sending a periodic request to the Tigo Secure server. In the response the status is reported of each of the Tigo operations. A lack of response will mean the service is down caused by a network error or other failure. These events should be logged and alerted on to Tigo in order to be restored to normal operation.\n\n\nInternational Remittance Money Deposit\n\n\nThe process to deposit money for international remittance is shown in the Figure below.\n\n\n(1,2) An Access token has to be requested for the Tigo Secure Server via the \nGenerateAccessToken service\n using the Apigee API Key and secret.\n\n\n(3-6) The next optional step is to Validate the MFS Account via the \nValidateMFSAccount\n service (section 4.6.1). In case no validation is done and the receiving Tigo subscriber does not have an MFS account then the next step to actually deposit the remittance will fail in which case an (optional) text message is sent suggesting the subscriber to sign up of an MFS account.\n\n\n(7-10) the Remittance Partner can deposit the amount in the local currency via the \nDepositRemittance\n service\n\n\n(11) The receiving Tigo subscriber will receive a text message in case this is specified in the request. This text message will be generated in the following two scenarios:\n\n\n\n\n\n\nSuccessful deposit a text message informing the subscriber that an international remittance has been received with the amount, name of the remittance partner and optionally the name of the sender (if provided in the request)\n\n\n\n\n\n\nUnsuccessful remittance cause by the receiving subscriber not having a MFS wallet a text message informing the subscriber that an international remittance was missed with the amount, name of the remittance partner, optionally the name of the sender (if provided in the request) - and the advice to open a Tigo MFS account\n\n\n\n\n\n\nThe Access Token is invalidated after the expiry time as specified in the Generate Access Token Response\n\n\nPayment Authorization\n\n\nThe Payment Authorization service is based on a URI redirect whereby the actual payment verification and authentication by subscriber is entirely handled on the Tigo Secure server. The next sections show the flows of the payment authorization where the verification is done via SMS in case of the Africa region and via USSD push for LATAM.\n\n\nThe initial language of the Tigo Secure webpages shown is set via the language parameter in the request. It is preferable to keep the language the same as the page from which the customer is redirected. The customer has the option to select a different language on the webpage itself as well.\n\n\nPayment Authorization via SMS verification code\n\n\nIn the following countries the payment is authorized by sending a verification code via text message to the subscriber:\n\n\n\n\n\n\nSenegal\n\n\n\n\n\n\nTanzania\n\n\n\n\n\n\nThis verification code is only valid for a limit duration of 1 minute and has to be filled in by the Customer on the Tigo Secure webpage. Besides this verification code the customer also has to provide their MFS PIN code. \n\n\n\n\nThe subscriber/customer initiates a Tigo MFS payment via the Merchant.\n\n\n\n\n2-3. An Access token is rquested for the Tigo Secre Server via the \nGenerateAccessToken\n service using the Apigee API Key\n\n\n4-8.  Th Payment Authorzato Request is made with the necssary paymnt details, this will return a rdirect URL to the Tigo\nSecure Payment Authorizaton page which the customter has to be redirected \n\n\n\n\nIn case the MSISDN is not yet specified in the Payment Authorization request or in case the MSISDN was incorrect (non-existent) then the Customer is redirected to a page to enter the MSISDN.\n\n\n\n\n\n\n(10-14) The MFS Account of the subscriber is validated after which the 'Verify' Page is shown. (see Figure 3-5) and a One-Time-Pin (Verification code) is sent via text message to the Tigo subscriber.\n\n\nFigure 3-5: Enter verification code page\n\n\n\n\n(15 - 16) The subscriber submits the verification code and after successful verification of the code the payment overview is shown to the customer requesting the Tigo MFS Account PIN.\n\n\nPayment Overview Page\n\n\n(17-19) The customer provides the MFS PIN and the purchase call to make sure the payment is sent. \n(20) Upon receipt of a successful purchase response the access token is invalidated and a payment result page is shown for a limited duration\n\n\n\n\n\n\n\n\nAn optional callback URI is called with the final transaction status. This callback URI can be used in case the front-end server does not allow processing the financial transaction status.\n\n\n\n\n\n\nThe final redirect is done to the specified redirect URI.\n\n\n\n\n\n\nThe non-nominal cases for the Payment Authorization using SMS verification are shown below\n\n\nInvalid Verification Code\n\n\n\n\nWhen the subscriber enters the incorrect verification code a warning is shown \"\nInvalid Verification Code.__Please re-enter\n\" with the possibility to try again. The number of attempts is limited by the expiry time of the verification code.\n\n\nFigure 3-8: Invalid Verification\n\n\nVerification Code expired\n\n\n\n\nIn case the verification code expires a warning is shown\n\n\n\"\nThe code has now expired. Please make sure you have the__phone at hand and click below to resend the code.\"\n with the option to resend a verification code. Resending the verification code is limited to 3 times.\n\n\nFigure 3-9: verification code expired\n\n\nIncorrect PIN code\n\n\n\n\nIn case the subscriber enters an incorrect PIN code a warning is displayed \"\nPIN was not valid. Please enter the__PIN again.\n\" The subscriber has three attempts to re-try.\n\n\nAfter that the subscriber account will get blocked.\n\n\nPayment Authorization via USSD Push\n\n\nIn the following countries the payment is authorized via a USSD menu\n\n\n\n\nBolivia\n\n\nEl Salvador\n\n\nHonduras\n\n\nParaguay\n\n\n\n\nThis USSD menu is pushed to the customer's mobile phone and requests to validate the transaction by sending the Tigo MFS PIN code. The flow is shown below:\n\n \n\n\nFigure: Payment Authorization flow USSD Push\n\n\n\n\nThe subscriber/customer initiates a Tigo MFS payment via the Merchant.\n\n\n\n\n(2-3) An Access token is requested for the Tigo Secure Server via the \nGenerateAccessToken\n service (Section 4.3.1) using the Apigee API Key and secret. \n\n\n(4-7) The Payment Authorization Request is made with the necessary payment details \n\n\n\n\n(Section 4.5.1) this will return a re-direct URL to the Tigo Secure Payment Authorization page to which the customer has to be redirected. The payment details page is shown in Figure 3-13.\n\n\nFigure: Payment details\n\n\n \n\n\n(8-10) The Customer submits the MISISDN and presses 'Confirm' to continue the transaction. A Purchase request is made which initiates a USSD session in which the Subscriber has to authorize the payment. The maximum duration is 5 minutes.\n\n\nFigure: Pending Payment confirmation via USSD\n\n\n\n\n(11-13) The Customer authorizes the payment via USSD and the transaction status page is shown for limited duration.\n\n\nFigure: Payment result page\n\n\n\n\n\n\nAn optional callback URI is called with the final transaction status. This callback URI can be used in case the front-end server does not allow processing the financial transaction status.\n\n\n\n\n\n\nThe final redirect is done to the specified redirect URI.\n\n\n\n\n\n\nReverse Transaction\n\n\n\n\n\n\nThe Reverse Transaction Service can be used to reverse or refund a successful transaction made via the Online Payment.\n\n \n\n\nAPI Specification\n\n\nIntroduction\n\n\nThis section covers the API specifications. Each service is divided in a Request and Response section containing the overview of the parameters and example requests and responses. The list of error codes is included in Annex A.6.4.\n\n\nThe following third-level domains are available for the Tigo Secure services:\n\n\nhttps://securesandbox.tigo.com/test\n environment\n\n\nhttps://secure.tigo.com/production\n environment\n\n\nIn the sections below the service URLs are relative to these two Tigo Secure domains. For example for a service called 'service1' the following URL is specified in the API specification:\n\n\ndomain\n/v1/service1\n\n\nTo use service1 on the test environment use the URL: \nhttps://securesandbox.tigo.com/v1/service1\n\n\nand on the production environment: \nhttps://secure.tigo.com/v1/service1\n\n\n\n\nGenerate Access Token Service\n\n\n\n\nThe Generate Access Token service is used to get a valid access token. The Millicom partner can only use the assigned API services via this access token. The access token has to be specified in each request header as described in the sub paragraphs below.\n\n\nThe validity of the access token is time limited and after each session the token is invalidated irrespective whether the service call resulted in a positive result or a failure. The expiry time is specified in the response.\n\n\n4.3.1. Request\n\n\nGenerate Access Token Request\n\n\n\n\n\n\n\n\nURL\n\n\n/v1/oauth/generate/accesstoken?grant_type=client_credentials\n\n\n\n\n\n\n\n\n\n\n\n\nMethod\n\n\nPOST\n\n\n\n\n\n\n\n\nHeaders\n\n\nContent-Type: application/x-www-form-urlencoded\n\n\n\n\n\n\n\n\nBody\n\n\nclient_id=\nclient_secret=\n\n\n\n\n\n\n\n\n\n\nwithin the body:\n\n\nis the unique client identifier as assigned during the registration process with Millicom\n\n\nis the secret/password as provided during the registration process with Millicom\n\n\nResponse\n\n\nAverage response time:\n 1 second\n\n\nMaximum response time: 5 seconds\n\n\nIn case as valid client_id and client_secret are submitted the following response is returned:\n\n\nHTTP response code: 200 OK JSON response body:\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\naccessToken\n\n\nString\n\n\nunique access token\n\n\n\n\n\n\nissuedAt\n\n\nInteger\n\n\nAccess Token issue Date and time as Unix time\n\n\n\n\n\n\nexpiresIn\n\n\nInteger\n\n\nExpiry time in seconds\n\n\n\n\n\n\n\n\n Generate Access Token Response parameters\n\n\nExample response:\n\n\nResponse code: 200 OK\n\n\nResponse body:\n\n\n{\n  \naccessToken\n: \n ABcdef123456ABcdef123456ABcd\n, \n  \nissuedAt\n: \n1410268728383\n,\n  \nexpiresIn\n: \n599\n,\n}\n\n\n\n\nIn case incorrect client_id or client_secret are provided the following error is returned:\n\n\nHTTP response code: 401 Unauthorized\n\n\nJSON response body:\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n\n\nErrorCode\n\n\nString\n\n\nError code\n\n\n\n\n\n\n\n\nError\n\n\nString\n\n\nError description\n\n\n\n\n\n\n\n\n\n\nExample response:\n\n\nResponse code: 401 Unauthorized\n\n\nResponse body:\n\n\n{\n  \nErrorCode\n : \ninvalid\\_client\n,\n  \nError\n :\nClient credentials are invalid\n\n}\n\n\n\n\nSystem Status Service \n\n\nThe System Status Service is provided to monitor the health of the service periodically (heartbeat signal). The service returns the status of both the network connectivity and the application status to the Tigo Secure server and from the Tigo Secure Server to the Tigo Operations.\n\n\nRequest\n\n\n\n\n\n\n\n\nSystem Status Request\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nURL\n\n\n/v1/tigo/systemstatus\n\n\n\n\n\n\n\n\nMethod\n\n\nGET\n\n\n\n\n\n\n\n\nHeader\n\n\naccessToken\n\n\nvalid access token\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4.4.2. Response\n\n\n\n\n\n\n\n\n\n\n\n\nAverage response time:\n\n\n 1 second\n\n\n\n\n\n\nMaximum response time:\n\n\n5 seconds\n\n\n\n\n\n\nHTTP response code:\n\n\n200 OK\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Parameter \n\n\n # \n\n\n Type \n\n\n Description \n\n\n\n\n\n\n\n\n\n\ntigoSecureStatusCode\n\n\n1\n\n\nInteger\n\n\nTigo Secure Server status code \n0 = OK. \nAny other number than 0 indicates a \nproblem occured\n\n\n\n\n\n\nstatusDescription\n\n\n1\n\n\nString\n\n\nDescription\n\n\n\n\n\n\nTigoOperationStatus\n\n\n0..n\n\n\n\n\nDescription\n\n\n\n\n\n\ncountry\n\n\n1\n\n\nString\n\n\nThree letter country code \n(ISO 3166-1)\n\n\n\n\n\n\ncode\n\n\n1\n\n\nInteger\n\n\nTigo Secure Server status code \n 0 = OK\n Any other number than 0 indicates a\n\n\n\n\n\n\nproblem occured\n\n\n\n\n\n\n\n\n\n\n\n\ndescription\n\n\n1\n\n\nString\n\n\nDescription\n\n\n\n\n\n\n\n\n Example response:\n\n\n{\n  \ntigoSecureStatusCode\n : 0, \n  \nstatusDescription\n : \nOK\n, \n  \nTigoOperationStatus\n :{\n    {\ncountry\n:\nTZA\n, \ncode\n:0, \n      \ndescription\n:\nOK\n\n    } \n    {\ncountry\n:\nSEN\n, \n      \ncode\n:0, \ndescription\n:\nOK\n\n    }\n  }\n}\n\n\n\n\nPayment Authorization service\n\n\nRequest\n\n\nFor the Tigo Secure Online Payment Authorization a redirect to the following URL has to be done including a JSON request with the required payment details:\n\n\nPayment Authorization Request\n\n\n\n\n\n\n\n\nURL\n\n\n/v1/tigo/payment-auth/autorize\n\n\n\n\n\n\n\n\n\n\n\n\nMethod\n\n\nPOST\n\n\n\n\n\n\n\n\nHeader\n\n\nContent-Type\n\n\napplication/json\n\n\n\n\n\n\n\n\naccessToken\n\n\nvalid access token\n\n\n\n\n\n\n\n\nJSON Request body:\n\n\n\n\n\n\n\n\nParameter\n\n\n#\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nMasterMerchant\n\n\n1\n\n\n\n\n\n\n\n\n\n\naccount\n\n\n1\n\n\nString\n\n\nMFS Account number in the destination country \n (account to credit)\n\n\n\n\n\n\npin\n\n\n1\n\n\nString\n\n\nMFS Account PIN code\n\n\n\n\n\n\nid\n\n\n1\n\n\nString\n\n\nIdentifier of master merchant (i.e. company name) \nas provided by Millicom\n\n\n\n\n\n\nMerchant\n\n\n0..1\n\n\n[optional]\n\n\n\n\n\n\n\n\nreference\n\n\n1\n\n\nString\n\n\nReference of the originating merchant (company name) \nin case the payment was made \non behalf of  another company\n\n\n\n\n\n\nfee\n\n\n0..1\n\n\nDecimal\n\n\nMerchant fee for the transaction in the origin currency.This fee is charged from the merchant Information about this fee will not be communicated to the subscriber. This information is confidential and is to be used for reconciliation\n\n\n\n\n\n\ncurrencyCode\n\n\n0..1\n\n\nString\n\n\nCurrency code of the Merchant fee\n\n\n\n\n\n\nSubscriber\n\n\n1\n\n\n\n\n\n\n\n\n\n\naccount\n\n\n1\n\n\nString\n\n\nMFS Account number (msisdn) of the paying \nsubscriber (account to debit)\n\n\n\n\n\n\ncountryCode\n\n\n1\n\n\nString\n\n\nCountry code dialing prefix (annex A.4)\n\n\n\n\n\n\ncountry\n\n\n1\n\n\nString\n\n\nThree letter country code \n(ISO 3166-1 Annex A.2)\n\n\n\n\n\n\nfirstName\n\n\n0..1\n\n\nString\n\n\nFirst name of the subscriber\n\n\n\n\n\n\nlastName\n\n\n0..1\n\n\nString\n\n\nLast name of the subscriber\n\n\n\n\n\n\nemailId\n\n\n0..1\n\n\nString\n\n\n[optional]\n Email address\n\n\n\n\n\n\nredirectUri\n\n\n1\n\n\nString\n\n\nRedirection URI to redirect after completing the payment\n\n\n\n\n\n\ncallbackUri\n\n\n0..1\n\n\nString\n\n\n[optional]\n Result callback URI\n\n\n\n\n\n\nlanguage\n\n\n1\n\n\nString\n\n\nThree letter code for the language\n\n\n\n\n\n\nterminalId\n\n\n0..1\n\n\nString\n\n\n[optional]\n Terminal ID\n\n\n\n\n\n\noriginPayment\n\n\n1\n\n\n\n\n\n\n\n\n\n\namount\n\n\n1\n\n\nDecimal\n\n\nTotal amount in the currency of the original  merchant payment\n\n\n\n\n\n\ncurrencyCode\n\n\n1\n\n\nString\n\n\nCurrency code of the payment (see Annex A.1)\n\n\n\n\n\n\ntax\n\n\n1\n\n\nDecimal\n\n\nTax for the transaction in the origin currency\n\n\n\n\n\n\nfee\n\n\n1\n\n\nDecimal\n\n\nFee applied by the Master Merchant for the transaction in the origin currency. This fee is charged from the subscriber and will be shown to the subscriber. If no fee has been applied the field can be set to 0\n\n\n\n\n\n\nexchangeRate\n\n\n0..1\n\n\nDecimal\n\n\n[optional]\n Exchange rate between the origin currency (currency of the sending country) and local currency (currency of the receiving country)\n\n\n\n\n\n\nLocalPayment\n\n\n1\n\n\n\n\n\n\n\n\n\n\namount\n\n\n1\n\n\nDecimal\n\n\nTotal amount in the local currency of the paying subscriber\n\n\n\n\n\n\ncurrencyCode\n\n\n1\n\n\nString\n\n\nCurrency code of the MFS account of the paying subscriber (local currency)\n\n\n\n\n\n\ntransactionRefId\n\n\n1\n\n\nString\n\n\nReference Identifier in order to uniquely identify the transaction.\n\n\n\n\n\n\n\n\n Sample Request:\n \n\n\n{\n  \nMasterMerchant\n:{\n    \naccount\n:\n255321321321\n,\n    \npin\n:\n1234\n,\n    \nid\n:\nCompanyName\n\n  },\n  \nMerchant\n:{\n    \nreference\n:\nAmazon\n,\n    \nfee\n:\n23.45\n,\n    \ncurrencyCode\n:\nEUR\n\n  },\n  \nSubscriber\n:{\n    \naccount\n:\n255111111111\n, \n    \ncountryCode\n: \n255\n,\n    \ncountry\n:\ntza\n,\n    \nfirstName\n:\nJohn\n,\n    \nlastName\n:\nDoe\n,\n    \nemailId\n : \njohndoe@mail.com\n\n  },\n  \nredirectUri\n:\nhttps://someapp.com/payment/redirecturi\n,\n  \ncallbackUri\n:\nhttps://someapp.com/payment/statuscallback\n,\n  \nlanguage\n:\neng\n,\n  \nterminalId\n:\n,\n  \noriginPayment\n:{\n    \namount\n:\n75.00\n,\n    \ncurrencyCode\n:\nUSD\n,\n    \ntax\n:\n0.00\n,\n    \nfee\n:\n25.00\n\n    }\n  \nexchangeRate\n:\n2182.23\n,\n  \nLocalPayment\n:{\n    \namount\n:\n218223.00\n,\n    \ncurrencyCode\n:\nTZS\n\n    },\n  \ntransactionRefId\n:\n0a1e39ab\n\n}\n\n\n\n\nMake sure to \nuse the Access Token only\n* once \n*to initiate a Payment\n\n\nAuthorization**. For each Payment Authorization request a new accesstoken has to be generated. This is because the access token is invalidated after the transaction completed. Any other additional transaction initiated with the same access token will therefore fail.\n\n\nPer Payment Authorization make sure to \nuse a unique transaction\n reference identifier\n (transactionRefId) to identify the transaction. This will guarantee that the transaction is logged and traced correctly.\n\n\nResponse\n\n\nAverage response time:\n 1 second\n\n\nMaximum response time: 5 seconds\n\n\nHTTP response code: 200 OK\n\n\nJSON Response body:\n\n\n\n\n\n\n\n\nParameter\n\n\n#\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntransactionRefId\n\n\n1\n\n\nString\n\n\nUnique reference Identifier of the transaction\n\n\n\n\n\n\nredirectUrl\n\n\n1\n\n\nString\n\n\nTigo Secure redirect URL which has to be used to \nredirect the Customer to the correct Tigo Secure Payment Authorization webpage\n\n\n\n\n\n\nauthCode\n\n\n1\n\n\nString\n\n\nUnique code to authenticate the transaction for the customer when redirecting\n\n\n\n\n\n\ncreationDateTime\n\n\n1\n\n\nString\n\n\nTransaction Creation Date and Time\n\n\n\n\n\n\n\n\nPayment Authorization Response parameters\n\n\n Example response:\n\n\n{\n\ntransactionRefId\n:\n0a1e39ab\n,\n\nredirectUrl\n:\n https://securesandbox.tigo.com/v1/payment\\_auth/transactions?\u2026 auth\\_code=123123123\ntransaction\\_ref\\_id=0a1e39ab\nlang=eng\n,\n\nauthCode\n : \n123123123\n,\n\ncreationDateTime\n:\nFri, 10 Oct 2014 13:58:25 UTC\n\n}\n\n\n\n\nPayment status callback\n\n\nAfter the customer completes the payment via Tigo Secure the status is reported back. This is done via the optional callback URI or \u2013 in case this callback URI has not been specified \u2013 in the redirect URI as specified in the Payment Authorization Request. The optional callback URI will be called reporting back the transaction status with the following parameters:\n\n\n\n\n\n\n\n\nMethod\n\n\nPOST\n\n\n\n\n\n\n\n\n\n\nHeaders\n\n\nContent-Type: application/x-www-form-urlencoded\n\n\n\n\n\n\nBody\n\n\ntrans_status=\ntransaction status success/fail\ntransaction_ref_Id=\ntransaction_refID\nexternal_ref_id=\nexternal\\_ref\\_id\nmfs_id=\nmfs\\_id\n \nverification_code=\nAccess Token\nerror_code=\nerror\\_code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntrans_status\n\n\nTransaction status: success for a successful transaction \nfail in case of a failed transaction\n\n\n\n\n\n\ntransaction_ref_id\n\n\nTransaction Reference Identifier as specified in the request\n\n\n\n\n\n\nexternal_ref_id\n\n\n[optional]\n\n\n\n\n\n\nmfs_id\n\n\n[optional]\n MFS Platform transaction id of the payment. This will only be sent back in case of a successful payment\n\n\n\n\n\n\nverification_code\n\n\n[optional]\n The verification code is the invalidated \nAccess Token as generated at the start of the payment \nauthorization flow. This code has to be used to \nuniquely identify that payment status is reported back by Tigo Secure. \nNote that this access token is invalided after the \ntransaction failed/succeeded/expired so it can't be reused. \nThe verification code (Access Token) will be omitted \nin case the transaction failed. This is to prevent that a malicious callback can be done with a modified \ntransaction status.\n\n\n\n\n\n\nerror_code\n\n\n[optional]\n The error code in case the transaction \nfailed. The error codes are defined in Annex A.6.4.1.\n\n\n\n\n\n\n\n\nPayment status callback parameters\n\n\nSuccessful payment callback example:\n\n\nPOST HTTP/1.1\n\nHost: \ncallback URI\n\n\nContent-Type: application/x-www-form-urlencoded\n\nCache-Control: no-cache\n\ntrans\\_status= **success** \ntransaction\\_ref\\_id=0a1e39ab \nexternal\\_ref\\_id=38c1069f-2497-4f9c-9\nmfs\\_id=CO140924.1414.A00113\n **verification\\_code** =pfCIHgyWWg6qsUIOVFS u2HR3F4jy\nlang=eng\n\n\n\n\nThe verification code in the status callback is the invalidated\n\n\nAccess Token as generated at the start of the payment transaction.\n\n\nIn order to confirm that successful payment status has been reported back by Tigo Secure the following steps have to be performed:\n\n\n\n\n\n\nLookup the payment transaction using the transaction_ref_id\n\n\n\n\n\n\nCompare the verification_code against the original access token as used during the transaction\n\n\n\n\n\n\nOnly when the verification_code is equal to the original access token can the payment be treated as successful.\n\n\n\n\n\n\nIn case of a \nmismatch\n between the verification code and the access token the transaction should be \ntreated as failed\n and\n\n\nreported back to Millicom. The external_ref_id and transaction_id can be used for traceability of the transaction within the Millicom Tigo Operation.\n\n\nFailed payment example:\n\n\nPOST HTTP/1.1\n\nHost: \ncallback URI\n\n\nContent-Type: application/x-www-form-urlencoded\n\nCache-Control: no-cache\n\ntrans\\_status= **fail** \ntransaction\\_ref\\_id=0a1e39ab-d0ec -4f8b-9746-b2c4122220b2123\nerror\\_code= purchase-3008-30434-E\n\n\n\n\n\nFor a failed transaction the verification code (access token) is not reported back. This is to prevent a malicious callback with a modified transaction status.\n\n\nAfter the payment status callback a HTTP redirect will be done to the URI as specified in the redirectUri parameter in the Payment Authorization Request without any extra parameters.\n\n\nNote that in case no callbackUri was specified in the original request the payment status is reported back in the redirectUri in the manner as for the callback URI explained above.\n\n\nValidate MFS Account Service\n\n\nThe Validate MFS Account Service can be used to check whether the subscriber has a valid MFS account in the designated country. The request requires the subscriber MSISDN, first name and last name and country code as shown below.\n\n\n Request\n\n\nValidate MFS Account Request\n\n\n\n\n\n\n\n\nURL\n\n\n/v1/tigo/mfs/validateMFSAccount\n\n\n\n\n\n\n\n\n\n\n\n\nMethod\n\n\nPOST\n\n\n\n\n\n\n\n\nHeader\n\n\nContent-Type\n\n\napplication/json\n\n\n\n\n\n\n\n\naccessToken\n\n\nvalid access token\n\n\n\n\n\n\n\n\nJSON Request body:\n\n\n\n\n\n\n\n\nParameter\n\n\nCardinality\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntransactionRefId\n\n\n1\n\n\nString\n\n\nReference Identifier in order to uniquely identify the transaction\n\n\n\n\n\n\nReceivingSubscriber\n\n\n1\n\n\n\n\n\n\n\n\n\n\naccount\n\n\n1\n\n\nString\n\n\nMFS Account to validate of the receiving subscriber\n\n\n\n\n\n\ncountryCallingCode\n\n\n1\n\n\nInteger\n\n\nCounty Calling code\n\n\n\n\n\n\ncountryCode\n\n\n1\n\n\nString\n\n\nThree letter country code (ISO 3166-1)\n\n\n\n\n\n\nfirstName\n\n\n0..1\n\n\nString\n\n\n[optional]\n First name of the subscriber\n\n\n\n\n\n\nlastName\n\n\n0..1\n\n\nString\n\n\n[optional]\n Last name of the subscriber\n\n\n\n\n\n\n\n\nTable 6: Validate MFS Account Request parameters\n\n\n Example request:\n\n\n{\n  \ntransactionRefId\n : \n1300074238\n, \n  \nReceivingSubscriber\n :{\n    \naccount\n : \n255658123964\n, \n    \ncountryCallingCode\n : \n255\n, \n    \ncountryCode\n : \nTZA\n, \n    \nfirstName\n : \nJohn\n, \n    \nlastName\n : \nDoe\n\n  }\n}\n\n\n\n\nResponse\n\n\nAverage response time:3 seconds\n\n\nMaximum response time: 5 seconds\n\n\nHTTP response code: 200 OK\n\n\nJSON response body:\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nValidateMFSAccountResponse\n\n\n\n\n\n\n\n\n\n\nResponseHeader\n\n\n\n\n\n\n\n\n\n\nGeneralResponse\n\n\n\n\n\n\n\n\n\n\ncorrelationID\n\n\nString\n\n\nThe is the transaction id as sent in the request\n\n\n\n\n\n\nstatus\n\n\nString\n\n\nStatus of executing the account validation request (OK, ERROR)\n\n\n\n\n\n\ncode  String\n\n\nStatus code of the account validation\n\n\n\n\n\n\n\n\ndescription\n\n\nString\n\n\nTechnical and brief description of the result\n\n\n\n\n\n\nResponseBody\n\n\n\n\n\n\n\n\n\n\nvalidMFSAccount\n\n\nString\n\n\nMFS account validation status true = account valid for provided details\n\n\n\n\n\n\n\n\nTable 7: Validate MFS Account Reponse parameters\n\n\nThe following response is returned for a valid MFS account:\n\n\nHTTP response code: 200 OK\n\n\n JSON response body:\n\n\n{\n\nValidateMFSAccountResponse\n:\n  {\n  \nResponseHeader\n:\n    {\n    \nGeneralResponse\n:\n      {\n      \ncorrelationID\n:1234,\n      \nstatus\n:\nOK\n, \n      \ncode\n:\nValidatemfsaccount-3018-0000-S\n, \n      \ndescription\n:\nProvided MSISDN is a valid MFSAccount.\n\n      }\n    },\n  \nResponseBody\n:\n    {\n    \nvalidMFSAccount\n:\ntrue\n\n    }\n  }\n}\n\n\n\n\nIn case of an invalid (non-existent) MFS account the follow response is returned:\n\n\nHTTP response code: 500 Internal Server Error\n\n\nJSON response body:\n\n\n{\n  \nFault\n:{\n    \nfaultcode\n: \nenv:Server\n,\n    \nfaultstrn\n: \nSubscriber not found\n,\n    \ndetail\n:{\n     \nValidateMFSAccountFault\n:{\n      \nResponseHeader\n:{\n        \nGeneralResponse\n:{\n          \ncorrelationID\n: 1300074238,\n          \nstatus\n: \nERROR\n,\n          \ncode\n: \nValidatemfsaccount-3018-3001-E\n, \n          \ndescription\n: \nSubscriber not found\n\n        }\n      }\n     }\n    }\n  }\n}\n\n\n\n\nDeposit Remittance Service\n\n\nWith the Deposit Remittance Service the money for the international remittance in deposited in the subscriber's wallet. The partner wallet is debited and the subscriber wallet is credited for the amount in the local currency as specified in the request. The response will confirm success of failure of the money deposit which includes a unique Transaction ID from the MFS platform.\n\n\n Request\n\n\nDeposit Remittance Request\n\n\n\n\n\n\n\n\nURL\n\n\n/v1/tigo/mfs/depositRemittance\n\n\n\n\n\n\n\n\n\n\n\n\nMethod\n\n\nPOST\n\n\n\n\n\n\n\n\nHeader\n\n\nContent-Type\n\n\napplication/json\n\n\n\n\n\n\n\n\naccessToken\n\n\nvalid access token\n\n\n\n\n\n\n\n\nJSON request body:\n\n\n\n\n\n\n\n\nParameter\n\n\n#\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntransactionRefId\n\n\n1\n\n\nString\n\n\nUnique Transaction Reference Identifier\n\n\n\n\n\n\nPaymentAggregator\n\n\n1\n\n\n\n\n\n\n\n\n\n\naccount\n\n\n1\n\n\nString\n\n\nMFS Account number in the destination  country\n\n\n\n\n\n\npin\n\n\n1\n\n\nString\n\n\nMFS Account PIN code\n\n\n\n\n\n\nid\n\n\n1\n\n\nString\n\n\nIdentifier of the payment aggregator (i.e.\n\n\n\n\n\n\ncompany name as provided by Millicom\n\n\n\n\n\n\n\n\n\n\n\n\nSender\n\n\n0..1\n\n\n[optional]\n\n\n\n\n\n\n\n\nfirstName\n\n\n1\n\n\nString\n\n\nFirst name of the Sender. This field can be left blank in case the information is not available.\n\n\n\n\n\n\nlastName\n\n\n1\n\n\nString\n\n\nLast name of the Sender. This field can be left blank in case the information is not available.\n\n\n\n\n\n\nmsisdn\n\n\n0..1\n\n\nString\n\n\n[optional]\n MSISDN of the Sender\n\n\n\n\n\n\nemailAddress\n\n\n0..1\n\n\nString\n\n\n[optional]\n e-mail address of the Sender\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nParameter\n\n\n#\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nReceivingSubscriber\n\n\n1\n\n\n\n\n\n\n\n\n\n\naccount\n\n\n1\n\n\nString\n\n\nMFS Account of the receiving subscriber\n\n\n\n\n\n\ncountryCallingCode\n\n\n0..1\n\n\nInteger\n\n\n[optional]\n Country Calling code\n\n\n\n\n\n\ncountryCode\n\n\n1\n\n\nString\n\n\nThree letter country code (ISO 3166-1 Annex A.2)\n\n\n\n\n\n\nfirstName\n\n\n1\n\n\nString\n\n\nFirst name of the subscriber\n\n\n\n\n\n\nlastName\n\n\n1\n\n\nString\n\n\nLast name of the subscriber\n\n\n\n\n\n\nOriginPayment\n\n\n0..1\n\n\n[optional]\n\n\n\n\n\n\n\n\namount\n\n\n1\n\n\nDecimal\n\n\nTotal amount in the currency of the sending country\n\n\n\n\n\n\ncurrencyCode\n\n\n1\n\n\nString\n\n\nCurrency code of the sending country\n\n\n\n\n\n\ntax\n\n\n1\n\n\nDecimal\n\n\nTax for the transaction in the origin currency\n\n\n\n\n\n\nfee\n\n\n1\n\n\nDecimal\n\n\nFee for the transaction in the origin currency\n\n\n\n\n\n\nexchangeRate\n\n\n0..1\n\n\nDecimal\n\n\n[optional]\n Exchange rate between the origin currency (currency of the sending country) and local currency (currency of the receiving country)\n\n\n\n\n\n\nverificationRequest\n\n\n0..1\n\n\nBoolean\n\n\n[optional]\n Verification flag (true/false). This feature is currently not supported. Only set to false otherwise the transaction will fail\n\n\n\n\n\n\nsendTextMessage\n\n\n0..1\n\n\nBoolean\n\n\n[optional]\n Flag to indicate whether a text message has to be sent (sendTextMessage= true) to the receiving subscriber in the following cases: Successful deposit: informing the subscriber received an international remittance with the amount, remittance partner and optionally the name of the sender. Unsuccessful deposit cause by the subscriber not signed up for a MFS account: informing the subscriber an international remittance was missed with the amount, remittance partner and optionally the name of the sender and the suggestion to open an MFS account.\n\n\n\n\n\n\nLocalPayment\n\n\n1\n\n\n\n\n\n\n\n\n\n\namount\n\n\n1\n\n\nDecimal\n\n\nTotal amount to payout in the local currency of the receiving subscriber (see Annex A.5 for formatting)\n\n\n\n\n\n\ncurrencyCode\n\n\n1\n\n\nString\n\n\nCurrency code of the receiving country (see Annex A.1)\n\n\n\n\n\n\n\n\nTable Deposit Remittance Request parameters\n\n\nExample Deposit Remittance Request\n\n\n\n{ \n\ntransactionRefId\n : \n1300074238\n,\n\nPaymentAggregator\n : \n  {\n  \naccount\n : \n255123123123\n, \n  \npin\n : \n1234\n,\n  \nid\n : \nCompany Name\n\n  },\n\nSender\n : {\n  \nfirstName\n : \nJane\n, \n  \nlastName\n : \nDoe\n, \n  \nmsisdn\n : \n2551234123423\n,\n  \nemailAddress\n : \njanedoe@mail.com\n\n  }, \n  \nReceivingSubscriber\n : {\n  \naccount\n : \n255111111111\n, \n  \ncountryCallingCode\n: \n255\n, \n  \ncountryCode\n : \nTZA\n, \n  \nfirstName\n : \nJohn\n, \n  \nlastName\n : \nDoe\n\n  },\n\nOriginPayment\n : { \n  \namount\n : \n100.00\n, \n  \ncurrencyCode\n : \nEUR\n, \n  \ntax\n : \n10.00\n,\n  \nfee\n : \n25.00\n\n  },\n  \nexchangeRate\n : \n2182.23\n, \n  \nverificationRequest\n : \ntrue\n, \n  \nsendTextMessage\n : \ntrue\n, \n  \nLocalPayment\n : {\n    \namount\n : \n200\n, \n    \ncurrencyCode\n : \nTZS\n\n  }\n}\n\n\n\n\nResponse\n\n\nAverage response time:3 seconds\n\n\nMaximum response time: 5 seconds\n\n\nHTTP response code: 200 OK\n\n\nJSON response body:\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nDepositRemittanceResponse\n\n\n\n\n\n\n\n\n\n\nResponseHeader\n\n\n\n\n\n\n\n\n\n\nGeneralResponse\n\n\n\n\n\n\n\n\n\n\ncorrelationID\n\n\nString\n\n\nThe is the transaction id as sent in the request\n\n\n\n\n\n\nstatus\n\n\nString\n\n\nStatus of executing the account validation request (OK, ERROR)\n\n\n\n\n\n\ncode\n\n\nString\n\n\nStatus code of the account validation (see codes below)\n\n\n\n\n\n\ndescription\n\n\nString\n\n\nTechnical and brief description of the result\n\n\n\n\n\n\nResponseBody\n\n\n\n\n\n\n\n\n\n\ntransactionId\n\n\nString\n\n\nTransaction Identifier from the MFS Platform\n\n\n\n\n\n\n\n\nTable: Deposit Remittance Response parameters\n\n\nExample Response\n\n\n{\n  \nDepositRemittanceResponse\n:{\n    \nResponseHeader\n:{\n      \nGeneralResponse\n:{\n        \ncorrelationID\n:1300074238,\n        \nstatus\n:\nOK\n, \n        \ncode\n:\ndepositremittance-3017-0000-S\n,\n        \ndescription\n:\nThe Transaction is completed successfully.\n\n      }\n    },\n    \nResponseBody\n:{\n      \ntransactionId\n:\nCO140912.1700.A00059\n\n    }\n  }\n}\n\n\n\n\nReverse Transaction service\n\n\nReverse Transaction Request\n\n\n\n\n\n\n\n\nURL\n\n\n/v1/tigo/mfs/reverseTransaction\n\n\n\n\n\n\n\n\n\n\nMethod\n\n\nPOST\n\n\n\n\n\n\nHeader\n\n\naccessToken \nvalid access token\n\n\n\n\n\n\n\n\nJSON request body:\n\n\n\n\n\n\n\n\nParameter\n\n\n#\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nMasterAccount\n\n\n1\n\n\n\n\n\n\n\n\n\n\naccount\n\n\n1\n\n\nString\n\n\nThe MFS account of the Master Merchant /Payment Aggregator as used in the original request Payment Request or Deposit Remittance API request\n\n\n\n\n\n\npin\n\n\n1\n\n\nString\n\n\nMFS Account PIN code for the Master Account\n\n\n\n\n\n\nid\n\n\n1\n\n\nString\n\n\nIdentifier of Master Merchant (i.e. company name) as provided by Millicom\n\n\n\n\n\n\ntransactionRefId\n\n\n1\n\n\nString\n\n\nTransaction Reference Identifier as submitted in the request (transactionRefId)\n\n\n\n\n\n\nmfsTransactionId\n\n\n1\n\n\nString\n\n\nThe MFS Transaction Identifier for the transaction this maps to the Payment Authorization status callback mfs_idvalue or the DepositRemittanceResponse \n[transactionId]\n\n\n\n\n\n\ncountryCode\n\n\n1\n\n\nString\n\n\nThree letter country code(ISO 3166-1 Annex A.2)\n\n\n\n\n\n\nsubscriberAccount\n\n\n0..1\n\n\nString\n\n\nMFS Account of the subscriber (MSISDN) Authorization or\n\n\n\n\n\n\nLocalPayment\n\n\n0..1\n\n\n[optional]\n\n\n\n\n\n\n\n\namount\n\n\n1\n\n\nDecimal\n\n\nTotal amount of the transaction in the local currency (see Annex A.5 for the formatting)\n\n\n\n\n\n\ncurrencyCode\n\n\n1\n\n\nString\n\n\nCurrency code of the Tigo country (see Annex\n\n\n\n\n\n\n\n\nTable: Reverse Transacton Request parameters\n\n\nExample request:\n\n\n{\n  \nMasterAccount\n :{\n    \naccount\n : \n255321321321\n, \n    \npin\n : \n1234\n,\n    \nid\n : \nCompanyName\n\n  },\n  \ntransactionRefId\n : \n0a1e39ab\n, \n  \nmfsTransactionId\n : \nCO140924.1414.A00113\n, \n  \ncountryCode\n : \ntza\n,\n  \nsubscriberAccount\n : \n255111111111\n,\n  \nLocalPayment\n :{\n    \namount\n : \n 218223.00\n, \n    \ncurrencyCode\n :\nTZS\n\n  }\n}\n\n\n\n\nResponse\n\n\nPayment Authorization Transaction Status service\n\n\nGet Transaction Status Request\n\n\n\n\n\n\n\n\nURL\n\n\n/v1/payment-auth/transactions/\n\n\n\n\n\n\n\n\n\n\nMethod\n\n\nGET\n\n\n\n\n\n\nHeader\n\n\naccessToken \n\n\n\n\n\n\n\n\nwith \n the MasterMerchant Identifier and transaction reference ID as specified in the Payment Authorization Request. For example when the below values were provided in the original Payment Authorization Request (Section 4.5.1):\n\n\nMasterMerchant\n:{\n\nid\n:\n **Company Name**\n\n\ntransactionRefId\n:\n **0a1e39ab**\n\n\n\n\n\nThe example request to retrieve the payment authorization transaction status will be in that case:\n\n\nGET /v1/payment-auth/transactions/ **Company Name0a1e39ab** HTTP/1.1\n\nHost: \nhost\n\n\naccessToken: \naccessToken\n Cache-Control: no-cache\n\n\n\n\nResponse\n \n\n\nAverage response time:\n 1 second\n\n\nMaximum response time: 5 seconds\n\n\nHTTP response code: 200 OK\n\n\nJSON response body:\n\n\n\n\n\n\n\n\nParameter\n\n\n#\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nTransaction\n\n\nrefId\n\n\n1\n\n\nString\n\n\n\n\n\n\nexternalRefId\n\n\n0..1\n\n\nString\n\n\n[optional]\n Tigo transaction Id of the request and responses between the internal servers. This will only be returned for successful transactions\n\n\n\n\n\n\nmfsId\n\n\n0..1\n\n\nString\n\n\n[optional]\n MFS Platform transaction id of the payment. This will only be returned for successful transactions in the following format: Fri, 10 Oct 2014 13:58:25 UTC\n\n\n\n\n\n\nStatus\n\n\n1\n\n\nString\n\n\nTransaction status: Success Fail\n\n\n\n\n\n\ncompletedOn\n\n\n1\n\n\nDate\n\n\nCompletion date and time of the transaction in the following format:Fri, 10 Oct 2014 13:58:54 UTC\n\n\n\n\n\n\nMasterMerchant\n\n\n1\n\n\n\n\n\n\n\n\n\n\naccount\n\n\n1\n\n\nString\n\n\nMFS Account number in the destination country (account to credit)\n\n\n\n\n\n\nid\n\n\n1\n\n\nString\n\n\nIdentifier of master merchant (i.e. company name)\n\n\n\n\n\n\nMerchant\n\n\n0..1\n\n\n[optional]\n\n\n\n\n\n\n\n\nreference\n\n\n1\n\n\nString\n\n\nReference of the originating merchant (company name) in case the payment was made on behalf of another company\n\n\n\n\n\n\nfee\n\n\n1\n\n\nDecimal\n\n\nMerchant fee for the transaction in the origin currency\n\n\n\n\n\n\ncurrencyCode\n\n\n1\n\n\nString\n\n\nCurrency code of the Merchant fee (see Annex A.1)\n\n\n\n\n\n\nSubscriber\n\n\n1\n\n\n\n\n\n\n\n\n\n\naccount\n\n\n1\n\n\nString\n\n\nMFS Account number (msisdn) of the paying subscriber (account to debit).\n\n\n\n\n\n\ncountryCode\n\n\n1\n\n\nString\n\n\nCountry code dialing prefix\n\n\n\n\n\n\ncountry\n\n\n1\n\n\nString\n\n\nThree letter country code (ISO 3166-1 Annex A.2)\n\n\n\n\n\n\nfirstName\n\n\n1\n\n\nString\n\n\nFirst name of the subscriber\n\n\n\n\n\n\nlastName\n\n\n1\n\n\nString\n\n\nLast name of the subscriber\n\n\n\n\n\n\nemailId\n\n\n0..1\n\n\nString\n\n\n[optional]\n Email address\n\n\n\n\n\n\nredirectUri\n\n\n1\n\n\nString\n\n\nRedirection URI to redirect after completing the payment\n\n\n\n\n\n\ncallbackUri\n\n\n0..1\n\n\nString\n\n\n[optional]\n Result callback URI\n\n\n\n\n\n\nlanguage\n\n\n1\n\n\nString\n\n\nThree letter code for the language (ISO 639-3 see Annex 0)\n\n\n\n\n\n\nterminalId\n\n\n0..1\n\n\nString\n\n\n[optional]\n Terminal ID\n\n\n\n\n\n\nOriginPayment\n\n\n1\n\n\n\n\n\n\n\n\n\n\nAmount\n\n\n1\n\n\nDecimal\n\n\nTotal amount in the currency of the sending country\n\n\n\n\n\n\ncurrencyCode\n\n\n1\n\n\nString\n\n\nCurrency code of the payment (see Annex A.1)\n\n\n\n\n\n\ntax\n\n\n1\n\n\nDecimal\n\n\nTax for the transaction in the origin currency\n\n\n\n\n\n\nfee\n\n\n1\n\n\nDecimal\n\n\nFee applied by the Master Merchant for the transaction in the origin currency\n\n\n\n\n\n\nexchangeRate\n\n\n0..1\n\n\nDecimal\n\n\n[optional]\n Exchange rate between the origin currency (currency of the sending country) and local currency (currency of the receiving country)\n\n\n\n\n\n\nLocalPayment\n\n\n1\n\n\n\n\n\n\n\n\n\n\namount\n\n\n1\n\n\nDecimal\n\n\nTotal amount in the local currency of the paying subscriber\n\n\n\n\n\n\ncurrencyCode\n\n\n1\n\n\nString\n\n\nCurrency code of the sending country\n\n\n\n\n\n\n\n\nTable: Payment Authorization Transaction Status Response parameters\n\n\nSample Payment Authorization Transaction Status response:\n\n\n{\n\nTransaction\n :{\n    \nrefId\n:\n0a1e39ab-d0ec-4f8b-9746-b2c4122220b2c120ww40\n, \n    \nexternalRefId\n : \n38c1069f-2497-4f9c-9\n,\n    \nmfsId\n : \nCO140924.1414.A00113\n,\n    \ncreatedOn\n : \nFri, 10 Oct 2014 13:58:25 UTC\n,\n    \nstatus\n : \nsuccess\n,\n    \ncompletedOn\n : \nFri, 10 Oct 2014 13:58:31 UTC\n,\n  },\n\nMasterMerchant\n:{\n    \naccount\n:\n255321321321\n,\n    \nid\n:\nSkrill Ltd\n\n  },\n\nMerchant\n:{\n  \nreference\n:\nAcme,Inc\n,\n  \nfee\n:\n23.45\n,\n  \ncurrencyCode\n:\nTZS\n,\n  }\n\nSubscriber\n:{\n  \naccount\n:\n255111111111\n,\n  \ncountryCode\n: \n255\n,\n  \ncountry\n:\ntza\n,\n  \nfirstName\n:\nJohn\n,\n  \nlastName\n:\nDoe\n,\n  \nemailId\n : \njohndoe@mail.com\n\n  },\n  \nredirectUri\n:\nhttps://someapp.com/payment/redirecturi\n,\n  \ncallbackUri\n:\n https://someapp.com/payment/statuscallback\n,\n  \nlanguage\n:\neng\n,\n  \nterminalId\n:\n,\n  \noriginPayment\n:\n  {\n    \namount\n:\n75.00\n,\n    \ncurrencyCode\n:\nUSD\n,\n    \ntax\n:\n0.00\n,\n    \nfee\n:\n25.00\n\n  },\n  \nexchangeRate\n:\n2182.23\n,\n  \nLocalPayment\n:{\n    \namount\n:\n218223.00\n,\n    \ncurrencyCode\n:\nTZS\n\n  }\n}\n\n\n\n\nDeposit Remittance Transaction Status service\n\n\n\n\n\n\n\n\nGet Deposit Remittance Transaction Status Request\n\n\n\n\n\n\n\n\n\n\n\n\nURL\n\n\n/v1/tigo/mfs/depositRemittance/transactions/\n\n\n\n\n\n\nMethod\n\n\nGET\n\n\n\n\n\n\nHeader\n\n\naccessToken \n\n\n\n\n\n\n\n\nwith \n the Payment Aggregator Identifier and transaction reference ID as specified in the Deposit Remittance Request. For example when the below values were provided in the original Payment Authorization Request:\n\n\n{ \n\ntransactionRefId\n : \n**1300074**\n,\n\nPaymentAggregator\n : {\n  \nid\n : \n **Company Name**\n\n  }\n}\n\n\n\n\nExample request:\n\n\nGET /v1/tigo/mfs/depositRemittance_/transactions/__ **Company Name** _ **1300074**\nHTTP/1.1\nHost: \nhost\n\naccessToken: _\naccessToken\n_\nCache-Control: no-cache\n\n\n\n\nResponse\n\n\nAverage response time:\n 1 second\n\n\nMaximum response time: 3 seconds\n\n\nHTTP response code: 200 OK\n\n\nJSON response body:\n\n\n\n\n\n\n\n\nParameter\n\n\n#\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nTransaction\n\n\n1\n\n\n\n\n\n\n\n\n\n\nrefId\n\n\n\n\nString\n\n\nUnique Transaction Reference Identifier as provided in the initial request\n\n\n\n\n\n\nstatus\n\n\n1\n\n\n\n\nTransaction status success/ fail\n\n\n\n\n\n\nmfsId\n\n\n1\n\n\nString\n\n\nMFS Platform transaction id of the payment\n\n\n\n\n\n\nerrorCode\n\n\n0..1\n\n\nString\n\n\nError code in case of a failed transaction\n\n\n\n\n\n\nPaymentAggregator\n\n\n1\n\n\n\n\n\n\n\n\n\n\naccount\n\n\n1\n\n\nString\n\n\nMFS Account number in the destination country\n\n\n\n\n\n\nid\n\n\n1\n\n\nString\n\n\nIdentifier of the payment aggregator (i.e.\n\n\n\n\n\n\nSender\n\n\n0..1\n\n\n\n\n\n\n\n\n\n\nfirstName\n\n\n1\n\n\nString\n\n\nFirst name of the Sender\n\n\n\n\n\n\nlastName\n\n\n1\n\n\nString\n\n\nLast name of the Sender\n\n\n\n\n\n\nmsisdn\n\n\n0..1\n\n\nString\n\n\n[optional]\n MSISDN of the Sender\n\n\n\n\n\n\nemailAddress\n\n\n0..1\n\n\nString\n\n\n[optional]\n e-mail address of the Sender\n\n\n\n\n\n\nReceivingSubscriber\n\n\n1\n\n\n\n\n\n\n\n\n\n\naccount\n\n\n1\n\n\nString\n\n\nMFS Account of the receiving subscriber\n\n\n\n\n\n\ncountryCallingCode\n\n\n0..1\n\n\nInteger\n\n\n[optional]\n Country Calling code\n\n\n\n\n\n\ncountryCode\n\n\n1\n\n\nString\n\n\nThree letter country code (ISO 3166-1 Annex A.2)\n\n\n\n\n\n\nfirstName\n\n\n1\n\n\nString\n\n\nFirst name of the subscriber\n\n\n\n\n\n\nlastName\n\n\n1\n\n\nString\n\n\nLast name of the subscriber\n\n\n\n\n\n\nOriginPayment\n\n\n0..1\n\n\n\n\n[optional]\n\n\n\n\n\n\namount\n\n\n1\n\n\nDecimal\n\n\nTotal amount in the currency of the sending country\n\n\n\n\n\n\ncurrencyCode\n\n\n1\n\n\nString\n\n\nCurrency code of the sending country (see Annex A.1)\n\n\n\n\n\n\ntax\n\n\n1\n\n\nDecimal\n\n\nTax for the transaction in the origin  currency\n\n\n\n\n\n\nfee\n\n\n1\n\n\nDecimal\n\n\nFee for the transaction in the origin currency\n\n\n\n\n\n\nexchangeRate\n\n\n0..1\n\n\nDecimal\n\n\n[optional]\n Exchange rate origin payment currency and local payment currency\n\n\n\n\n\n\nverificationRequest\n\n\n0..1\n\n\nBoolean\n\n\n[optional]\n currently not used\n\n\n\n\n\n\nsendTextMessage\n\n\n0..1\n\n\nBoolean\n\n\n[optional]\n Flag to send text message after complete the transaction\n\n\n\n\n\n\nlocalPayment\n\n\n1\n\n\n\n\n\n\n\n\n\n\namount\n\n\n1\n\n\nDecimal\n\n\nTotal amount to payout in the local currency of the receiving subscriber\n\n\n\n\n\n\ncurrencyCode\n\n\n1\n\n\nString\n\n\nCurrency code of the receiving country (see\n\n\n\n\n\n\n\n\nExample Response:\n\n\n{\n\nTransaction\n: {\n  \nrefId\n: \n1300074239\n, \n  \nstatus\n: \nsuccess\n,\n  \nmfsId\n: \nCI141127.2125.A03951\n\n}, \n\nPaymentAggregator\n :{\n  \naccount\n : \n255123123123\n,\n  \nid\n : \nCompanyName\n\n}, \n\nSender\n :{\n  \nfirstName\n : \nJane\n,\n  \nlastName\n : \nDoe\n,\n  \nmsisdn\n : \n441512121212\n,\n  \nemailAddress\n : \njanedoe@mail.com\n\n}, \n\nReceivingSubscriber\n :{\n  \naccount\n : \n255111111111\n,\n  \ncountryCallingCode\n : \n255\n,\n  \ncountryCode\n : \nTZA\n,\n  \nfirstName\n : \nJohn\n,\n  \nlastName\n : \nDoe\n\n}, \n\nOriginPayment\n :{\n  \namount\n : \n100.00\n,\n  \ncurrencyCode\n : \nEUR\n,\n  \ntax\n : \n10.00\n,\n  \nfee\n : \n25.00\n\n},\n\nexchangeRate\n : \n2182.23\n,\n\nverificationRequest\n : \nfalse\n,\n\nsendTextMessage\n : \ntrue\n,\n  \nlocalPayment\n :{\n    \namount\n : \n5555\n,\n    \ncurrencyCode\n : \nTZS\n\n  }\n}\n\n\n\n\nCurrency Codes\n\n\nThe Millicom supported currency codes are according to the ISO 4217 standard.\n\n\n Currency codes\n\n\n\n\n\n\n\n\nCode\n\n\nCurrency\n\n\n\n\n\n\n\n\n\n\nBOB\n\n\nBoliviano\n\n\n\n\n\n\nCDF\n\n\nCongolese franc\n\n\n\n\n\n\nCOP\n\n\nColombian peso\n\n\n\n\n\n\nEUR\n\n\nEuro\n\n\n\n\n\n\nGHS\n\n\nGhanaian cedi\n\n\n\n\n\n\nGTQ\n\n\nGuatemalan quetzal\n\n\n\n\n\n\nPYG\n\n\nParaguayan guaran\u00ed\n\n\n\n\n\n\nRWF\n\n\nRwandan franc\n\n\n\n\n\n\nTZS\n\n\nTanzanian shilling\n\n\n\n\n\n\nUSD\n\n\nUnited States dollar\n\n\n\n\n\n\nXAF\n\n\nCFA franc BEAC\n\n\n\n\n\n\nXOF\n\n\nCFA Franc\n\n\n\n\n\n\n\n\nCountry Codes\n\n\nThe Millicom supported country codes are according to the ISO 3166-1 alpha-3 standard.\n\n\n\n\n\n\n\n\nCode\n\n\nCountry\n\n\n\n\n\n\n\n\n\n\nBOL\n\n\nBolivia, Plurinational State of\n\n\n\n\n\n\nCOD\n\n\nCongo, the Democratic Republic of the\n\n\n\n\n\n\nCOL\n\n\nColombia\n\n\n\n\n\n\nGHA\n\n\nGhana\n\n\n\n\n\n\nGTM\n\n\nGuatemala\n\n\n\n\n\n\nHND\n\n\nHonduras\n\n\n\n\n\n\nPRY\n\n\nParaguay\n\n\n\n\n\n\nRWA\n\n\nRwanda\n\n\n\n\n\n\nSEN\n\n\nSenegal\n\n\n\n\n\n\nSLV\n\n\nEl Salvador\n\n\n\n\n\n\nTCD\n\n\nChad\n\n\n\n\n\n\nTZA\n\n\nTanzania, United Republic of\n\n\n\n\n\n\n\n\nLanguage Codes\n\n\nThe Millicom supported language codes are according to the ISO 639-3 standard.\n\n\n\n\n\n\n\n\nCode\n\n\nLanguage\n\n\n\n\n\n\n\n\n\n\nara\n\n\nArabic\n\n\n\n\n\n\naym\n\n\nAymara\n\n\n\n\n\n\ncab\n\n\nGarifuna\n\n\n\n\n\n\nemk\n\n\nEastern Maninkakan\n\n\n\n\n\n\neng\n\n\nEnglish\n\n\n\n\n\n\nfra\n\n\nFrench\n\n\n\n\n\n\nful\n\n\nFulah\n\n\n\n\n\n\ngrn\n\n\nGuarani\n\n\n\n\n\n\njod\n\n\nWojenaka\n\n\n\n\n\n\njud\n\n\nWorodougou\n\n\n\n\n\n\nkfo\n\n\nKoro (C\u00f4te d'Ivoire)\n\n\n\n\n\n\nkga\n\n\nKoyaga\n\n\n\n\n\n\nkin\n\n\nKinyarwanda\n\n\n\n\n\n\nlin\n\n\nLingala\n\n\n\n\n\n\nlua\n\n\nLuba-Lulua\n\n\n\n\n\n\nmiq\n\n\nM\u00edskito\n\n\n\n\n\n\nmku\n\n\nKonyanka Maninka\n\n\n\n\n\n\nmsc\n\n\nSankaran Maninka\n\n\n\n\n\n\nmxx\n\n\nMahou\n\n\n\n\n\n\nmzj\n\n\nManya\n\n\n\n\n\n\nque\n\n\nQuechua\n\n\n\n\n\n\nsnk\n\n\nSoninke\n\n\n\n\n\n\nspa\n\n\nSpanish\n\n\n\n\n\n\nsrr\n\n\nSerer\n\n\n\n\n\n\nswa\n\n\nSwahili (macrolanguage)\n\n\n\n\n\n\nwol\n\n\nWolof\n\n\n\n\n\n\n\n\nCountry Calling Codes\n\n\n\n\n\n\n\n\nCountry\n\n\nCalling code\n\n\n\n\n\n\n\n\n\n\nBolivia, Plurinational State of\n\n\n591\n\n\n\n\n\n\nCongo, the Democratic Republic of the\n\n\n243\n\n\n\n\n\n\nColombia\n\n\n57\n\n\n\n\n\n\nGhana\n\n\n233\n\n\n\n\n\n\nGuatemala\n\n\n502\n\n\n\n\n\n\nHonduras\n\n\n504\n\n\n\n\n\n\nParaguay\n\n\n595\n\n\n\n\n\n\nRwanda\n\n\n250\n\n\n\n\n\n\nSenegal\n\n\n221\n\n\n\n\n\n\nEl Salvador\n\n\n503\n\n\n\n\n\n\nChad\n\n\n235\n\n\n\n\n\n\nTanzania, United Republic of\n\n\n255\n\n\n\n\n\n\n\n\nAmount Format Convention\n\n\nThe amounts in the API requests are formatted according to the following standard:\n\n\n######.##\n\n\nWhereby . (dot) will be used as the separator character for decimals (cents). No separator character is required (allowed) for thousands.\n\n\nResult and error codes\n\n\nHTTP status codes\n\n\nThe supported HTTP Status codes are shown in the table below.\n\n\n\n\n\n\n\n\nCode\n\n\nMessage\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n200\n\n\nOK\n\n\nSuccess\n\n\nReturned for all Successful Responses\n\n\n\n\n\n\n400\n\n\nInvalid Request\n\n\nError\n\n\nOne or more of the input mandatory fields are missing. Display an Invalid Request screen.\n\n\n\n\n\n\n401\n\n\nUnauthorized\n\n\nError\n\n\nAPI Key is not valid\n\n\n\n\n\n\n403\n\n\nForbidden\n\n\nError\n\n\nAPI Key in not subscribed to service\n\n\n\n\n\n\n405\n\n\nMethod Not Allowed\n\n\nError\n\n\nServed for Methods other than POST\n\n\n\n\n\n\n406\n\n\nNot Acceptable\n\n\nError\n\n\nAccept Header does not comply with x-www-form-urlencoded\n\n\n\n\n\n\n500\n\n\nInternal Server Error\n\n\nError\n\n\nAny Error that is returned from the back-end systems (see next subparagraphs) or errors that are not covered by this list\n\n\n\n\n\n\n505\n\n\nHTTP Version Not Supported\n\n\nError\n\n\nFor Requests not on HTTP/1.1 protocol\n\n\n\n\n\n\n\n\nGeneral error codes\n\n\nIP address not whitelisted\n\n\nThe response below will be returned in case the IP address has not been whitelisted for the service called. Contact Millicom in order to add the correct IP address to the required services.\n\n\nStatus code: HTTP/1.1 403 Forbidden\n\n\n{\n  \nfault\n:{\n      \nfaultstring\n:\nAccess Denied for client ip : _\nIP address\n_\n, \n    \ndetail\n:{\n      \nerrorcode\n:\naccesscontrol.IPDeniedAccess\n\n    }\n  }\n}\n\n\n\n\nInvalid Request\n\n\nIn case the header or JSON request body is incorrect the error as shown below will be returned. Please check the request is\n\n\nStatus code: HTTP/1.1 400 Bad Request\n\n\n{\n  ErrorCode: \ninvalid\\_request\n,\n  Error: \nMissing required parameter transactionRefId\n\n}\n\n\n\n\nInvalid Access Token\n\n\nThe following error is returned in case an invalid Access Token is provided\n\n\nStatus code: HTTP/1.1 401 Unauthorized\n \n\n\nInvalid accessToken. Please enter valid token.\n\n\nAccess Token Expired\n\n\nThe following error is returned in case an invalid Access Token is provided\n\n\nStatus code: HTTP/1.1 401 Unauthorized\n\n\nExpired accessToken. Please enter valid token.\n\n\nTransaction Reference ID already used\n\n\nThe error below is returned in case Transaction Reference ID has already been used for a previous transaction.\n\n\nStatus code: HTTP/1.1 400 Invalid Request\n\n\n{\n\nErrorCode\n: \ninvalid\\_request\n,\n\nError\n: \ntransactionRefId already exists\n\n}\n\n\n\n\nA.6.3. API Permission error\n\n\nThe error below is returned in case the API has not been activated for the given Client_id and secret.\n\n\nStatus code: HTTP/1.1 401 Invalid Request\n\n\nYou don't have permission to access \u2026 API. Please contact Millicom admin\n\n\nService specific result and error codes\n\n\nThe subsections below list the Result and Error codes per service. The nominal (successful) cases are covered in Section 4.\n\n\nIn case of an error a JSON response is returned with the following structure:\n\n\n{\n  \nFault\n:{\n    \nfaultcode\n:\nenv:Server\n, \n    \nfaultstring\n:\n_\nerror description\n_\n,\n    \ndetail\n:{\n      \nValidateMFSAccountFault\n:{\n      \nResponseHeader\n:{\n        \nGeneralResponse\n:{\n          \ncorrelationID\n:_\nTigo correlation ID\n_,\n          \nstatus\n:\nERROR\n,\n          \ncode\n:\n_\nerror code\n_\n,\n          \ndescription\n:\n_\nerror description\n_\n          }\n        }\n      }\n    }\n  }\n}\n\n\n\n\nThe error code provide in the \"code\" field has the following format:\n\n\nAPI\n-\nAPIID\n-\nERROR CODE\n-\nTYPE OF FAULT\n where\n\n\nAPI \u2013 Tigo API name\n\n\nAPIID \u2013 unique numeric identifier of the API within Tigo\n\n\nError code \u2013 based on the range and the fault type .\n\n\nType of fault with:\n\n\nE \u2013 business fault \u2013 3000 range\n\n\nF \u2013 fatal errors (such as network related faults) 2000 range\n\n\nV \u2013 validation fault \u20134000 range\n\n\nS \u2013 Success \u20130000 range\n\n\nW \u2013 warning (scenarios such as partial responses) \u2013 6000 range\n\n\nAuthorization Service result codes\n\n\n\n\n\n\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n00-S\n\n\nSuccessful Payment\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nError Category\n\n\n\n\n\n\n01-F\n\n\nBackend System error\n\n\nBackend Error caused the transaction to be terminated\n\n\n\n\n\n\n02-F\n\n\nTransaction timed out\n\n\nThe transaction timed out caused by timing out\n\n\n\n\n\n\n11-E\n\n\nUnable to complete transaction invalid amount\n\n\nUnable to complete transaction due to invalid amount\n\n\n\n\n\n\n43-E\n\n\nTransaction not authorized\n\n\nThe customer did not authorize and therefore the transaction failed, this can be caused by the customer not authorizing payment, incorrect verification code, insufficient balance etc.\n\n\n\n\n\n\n45-E\n\n\nCancel Transaction\n\n\nThe customer doesn't wish to continues with the transaction and wants to cancel it at its current state\n\n\n\n\n\n\n\n\nFS Account Service result codes\n\n\n\n\n\n\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nt-3018-0000-S\n\n\nProvided MSISDN is a valid MFS Account.\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\n Error Category\n\n\n\n\n\n\nt-3018-4501-V\n\n\nInvalid request, please check the input  and resubmit\n\n\nOSB Validation Error\n\n\n\n\n\n\nt-3018-3001-E\n\n\nBackend error description\n\n\nBackend Error\n\n\n\n\n\n\nt-3018-2501-F\n\n\nOne or more backends may be down. Please try again later\n\n\nConnection Error\n\n\n\n\n\n\nt-3018-2502-F\n\n\nService call has timed out, Please try again later\n\n\nTimeout error\n\n\n\n\n\n\nt-3018-2505-F\n\n\nService Authentication failed\n\n\nOWSM Authentication Failure\n\n\n\n\n\n\nt-3018-2506-F\n\n\nCustomer is not authorized to use this service\n\n\nOWSM Authenticaton Failure\n\n\n\n\n\n\nt-3018-3603-E\n\n\nInternal Service Error has occured\n\n\nInternal Service Error\n\n\n\n\n\n\nt-3018-3999-E\n\n\nUnknown/Uncaught Error has occured\n\n\nUnknown/Uncaught Error has occured\n\n\n\n\n\n\nt-3018-4502-V\n\n\nInvalid ISD code passed in the MSISDN\n\n\nValidation Error\n\n\n\n\n\n\nt-3018-4503-V\n\n\nWeb Service Implementation is not available for this countr\n\n\nValidation Error\n\n\n\n\n\n\nt-3018-4504-V\n\n\nRequired additional parameters are not passed in the request\n\n\nWhen the required additonal parameters are not passed in the request\n\n\n\n\n\n\nt-3018-4505-V\n\n\nDuplicate Additional parameters passed in the request\n\n\nWhen the required additional parameters are passed in the request repeatedly\n\n\n\n\n\n\nt-3018-4506-V\n\n\nInvalid consumerId passed in the request\n\n\nWhen the consuming application id passed is invalid\n\n\n\n\n\n\n\n\nRemittance Service result codes\n\n\n\n\n\n\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-3017-0000-S\n\n\nThe Transaction is completed successfully\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nError Category\n\n\n\n\n\n\n-3017-2501-F\n\n\nOne or more back ends may be down. Please try again later\n\n\nConnection Error. This is a Tigo internal error, This is treated as 'Service not available'\n\n\n\n\n\n\n-3017-2502-F\n\n\nService call has timed out. Please try again later\n\n\nTimeout error\n\n\n\n\n\n\n-3017-2505-F\n\n\nService Authentication Failed.\n\n\nOWSM Authentication Failure. This is a Tigo error and should be treated as 'Service not available\n\n\n\n\n\n\n-3017-2506-F\n\n\nConsumer is not authorized to use this service\n\n\nOWSM Authentication Failure. This is a Tigo error and should be treated as 'Service not available'\n\n\n\n\n\n\n-3017-3001-E\n\n\nBackend error description\n\n\nUncaught error from the Tigo MFS Platform, this should be treated as 'Service not available'\n\n\n\n\n\n\n-3017-3002-E\n\n\nAuthorization failed\n\n\nThe authorization for the transaction with this Account details failed. Check the account details, or make a new request. If the error persists contact Tigo\n\n\n\n\n\n\n-3017-3003-E\n\n\nPassword expired\n\n\nThe PIN/Password for the MFS account expired, please contact Tigo to reset the PIN\n\n\n\n\n\n\n-3017-3004-E\n\n\nSender account suspended\n\n\nThe MFS Account has been suspended. Contact Tigo to resolve\n\n\n\n\n\n\n-3017-3005-E\n\n\nSender account does not exist\n\n\nThe provided MFS Account does not exist on the platform in the country. Check the MFS Account and send a new transaction. If error persists resolve\n\n\n\n\n\n\n-3017-3006-E\n\n\nReceiver Account suspended\n\n\nThe receiving MFS account has been suspended therefore a remittance is not possible to this account\n\n\n\n\n\n\n-3017-3007-E\n\n\nReceiver Account does not exist\n\n\nThe receiving MFS account does not exist and remittance is not possible to this account.\n\n\n\n\n\n\n-3017-3008-E\n\n\nInvalid amount specified\n\n\nAn invalid amount has been specified, send in a new transaction with a correct amount.\n\n\n\n\n\n\n-3017-3009-E\n\n\nMaximum balance threshold for receiver\n\n\nThe balance of the receiving MFS account has been exceeded and therefore a remittance is not possible to this account\n\n\n\n\n\n\n-3017-3010-E\n\n\nMaximum number of transaction for receiver account has been reached\n\n\nThe maximum number of transactions of the account has been reached and therefore a remittance is not possible to this account\n\n\n\n\n\n\n-3017-3011-E\n\n\nMaximum number of transaction for sender account reached\n\n\nThe maximum number of transactions of the account has been reached and therefore a remittance to this account is not possible\n\n\n\n\n\n\n-3017-3012-E\n\n\nTransaction amount is less than the minimum transaction limit\n\n\nThe amount as passed in the request is less than the minimum transaction limit\n\n\n\n\n\n\n-3017-3013-E\n\n\nMaximum transaction limit exceeded\n\n\nThe amount as passed in the request is more than the maximum transaction limit.\n\n\n\n\n\n\n-3017-3014-E\n\n\nSender and receiver account are the same\n\n\nThe sender and receiver accounts as specified in the request are the same.\n\n\n\n\n\n\n-3017-3015-E\n\n\nService timeout\n\n\nThe request to deposit the remittance has timed out, therefore has not been completed.\n\n\n\n\n\n\n-3017-3016-E\n\n\nInsufficient funds\n\n\nThe account used for sending funds has insufficient funds for the case of the Payment aggregator account this should not occur, if it does, Millicon has to be contacted\n\n\n\n\n\n\n-3017-3017-E\n\n\nInsufficient account permission\n\n\nThe account has insufficient permission to perform the deposit remittance. In case of the Payment aggregator account this should not occur, if it does, Millicon should be contacted\n\n\n\n\n\n\n-3017-3018-E\n\n\nUser not found\n\n\nThe account specified in the request cannot be found\n\n\n\n\n\n\n-3017-3603-E\n\n\nInternal service error has occurred.\n\n\nInternal service error. This is a Tigo internal error, and should be treated as 'Service not available'\n\n\n\n\n\n\n-3017-3999-E\n\n\nUnknown/Uncaught error has occurred.\n\n\nUnknown/Uncaught error has occurred. Thiis a tigo internal error and should be treated as 'Service not availabe'\n\n\n\n\n\n\n-3017-4002-V\n\n\nInvalid amount passed in the request.\n\n\nWhen the amount is less than or equal to zero", 
            "title": "Online Payments Guide"
        }, 
        {
            "location": "/online_payments/#application-integration-guidelines-for-online-payments", 
            "text": "", 
            "title": "Application integration guidelines for online payments"
        }, 
        {
            "location": "/online_payments/#connectivity-and-communication", 
            "text": "The diagram below shows a high level view of the international integration for the MFS services with the Tigo Mobile Operators in Latin-America and Africa. Integration is done via a central Tigo Secure Server hosted on Apigee. This centralized server takes care of access control, routing, requests to the corresponding Tigo operation and most importantly the secure handling of data. All communication on all the interfaces is encrypted.     Partner  Tigo Secure Server  Operators          \uf0b7  SSL  \uf0b7  Mutal SSL      \uf0b7  IP Whitelisting  \uf0b7  IP Whitelisting     Millicom Tigo Secure is hosted on Apigee in a minimum of two datacenters. This mission critical platform has up to 99.99% availability. The cloud environment provides load-balancing and failover across the multiple server instances.  All the provided services are exposed to use JSON.  Two main URIs are provided for integration:  https://securesandbox.tigo.com/test  environment  https://secure.tigo.com/production  environment  All communication with the Tigo Secure Server use HTTPS / SSL to exchange information. The Payment Authorization solution is established via one-way SSL. The international remittance deposit money service requires two-way SSL and IP whitelisting.", 
            "title": "Connectivity and communication"
        }, 
        {
            "location": "/online_payments/#integration-steps", 
            "text": "The following steps have to be carried out in order to integrate successfully with the Millicom Tigo Secure environment and the Mobile Financial Services:    Register with Millicom Tigo    Acquire an Apigee API Key and secret    Exchange SSL certificates for 2-way SSL    Make sure that MFS Accounts have been created in the respective countries and that account numbers and pin codes are known    Submit the IP address of the server(s) that will connect with Tigo Secure in order to whitelist", 
            "title": "Integration steps"
        }, 
        {
            "location": "/online_payments/#partner-mobile-accounts", 
            "text": "For each Millicom Tigo operation with which a partner will integrate a separate MFS Account (also called mobile wallet) has to be opened. Each account is uniquely identified with either a MSISDN or username and a PIN code. For each service call interacting with the MFS Account the correct account details have to be provided in the request for the designated country.  Opening an account the exact process depends on the country and in general involves the following steps:   Signed NDA   Company to provide KYC details\n_Differs from country to country but high level is:    Business Name    Business License    Tax Identification Number    Stated Capital      Contact person(s) details   ID    Bank account details of account in local bank    Depending on the use cases and the functionality/product launched these can be broadly classified into 2 kinds of accounts:    Pre-Funded Account    Collection Account    Pre-funded account    \u2013This type of account is provided in case of integrations where the partner is required to have virtual money (e-money/local MFS currency) in advance to make transfers into the end users wallets. The local process of procuring this MFS currency (e-money) differs per operation but it usually involves depositing actual money in the local currency into the bank account designated by the Tigo operation and getting a mirror value replicated in the MFS platform (as e-money or MFS currency).  Typical products and functionalities using this type of account are Disbursements, Remittance transfers, Transfers.  The settlement process is usually agreed between both entities that governs the management of the e-money and real money  Collection Account    \u2013This type of account is provided in cases where thepartner is required to collect or accumulate transfers into their accounts. The end user that has a valid account would be able to transfer e-money/MFS currency into the partner account for the intention of making payments, transfers, purchases etc.  Typical products and functionalities using this type of account are:  Merchant Payments, Bill payments, transfers, goods purchases.  As confirmed before the settlement process defined governs the movements and transfer between the collection account and the partner's bank account.", 
            "title": "Partner Mobile Accounts"
        }, 
        {
            "location": "/online_payments/#session-access-token", 
            "text": "For each session a valid Access Token has to be requested via the GenerateAccessToken service (see section 4.3) using the API key and secret.  This Access Token has a limited validity period. After completing a session (either successful or unsuccessful) the access token will be invalidated. The process is shown in the next sections.  Warning:  You should never authenticate using the API Key and Secretdirectly from a client-side app such as a mobile app. A hacker could analyze your app and extract the credentials for malicious use even if those credentials are compiled and in binary format. [Source: Apigee]", 
            "title": "Session Access Token"
        }, 
        {
            "location": "/online_payments/#system-status-heartbeat-signal", 
            "text": "The system status is monitored by sending a periodic request to the Tigo Secure server. In the response the status is reported of each of the Tigo operations. A lack of response will mean the service is down caused by a network error or other failure. These events should be logged and alerted on to Tigo in order to be restored to normal operation.", 
            "title": "System Status heartbeat signal"
        }, 
        {
            "location": "/online_payments/#international-remittance-money-deposit", 
            "text": "The process to deposit money for international remittance is shown in the Figure below.  (1,2) An Access token has to be requested for the Tigo Secure Server via the  GenerateAccessToken service  using the Apigee API Key and secret.  (3-6) The next optional step is to Validate the MFS Account via the  ValidateMFSAccount  service (section 4.6.1). In case no validation is done and the receiving Tigo subscriber does not have an MFS account then the next step to actually deposit the remittance will fail in which case an (optional) text message is sent suggesting the subscriber to sign up of an MFS account.  (7-10) the Remittance Partner can deposit the amount in the local currency via the  DepositRemittance  service  (11) The receiving Tigo subscriber will receive a text message in case this is specified in the request. This text message will be generated in the following two scenarios:    Successful deposit a text message informing the subscriber that an international remittance has been received with the amount, name of the remittance partner and optionally the name of the sender (if provided in the request)    Unsuccessful remittance cause by the receiving subscriber not having a MFS wallet a text message informing the subscriber that an international remittance was missed with the amount, name of the remittance partner, optionally the name of the sender (if provided in the request) - and the advice to open a Tigo MFS account    The Access Token is invalidated after the expiry time as specified in the Generate Access Token Response", 
            "title": "International Remittance Money Deposit"
        }, 
        {
            "location": "/online_payments/#payment-authorization", 
            "text": "The Payment Authorization service is based on a URI redirect whereby the actual payment verification and authentication by subscriber is entirely handled on the Tigo Secure server. The next sections show the flows of the payment authorization where the verification is done via SMS in case of the Africa region and via USSD push for LATAM.  The initial language of the Tigo Secure webpages shown is set via the language parameter in the request. It is preferable to keep the language the same as the page from which the customer is redirected. The customer has the option to select a different language on the webpage itself as well.", 
            "title": "Payment Authorization"
        }, 
        {
            "location": "/online_payments/#payment-authorization-via-sms-verification-code", 
            "text": "In the following countries the payment is authorized by sending a verification code via text message to the subscriber:    Senegal    Tanzania    This verification code is only valid for a limit duration of 1 minute and has to be filled in by the Customer on the Tigo Secure webpage. Besides this verification code the customer also has to provide their MFS PIN code.    The subscriber/customer initiates a Tigo MFS payment via the Merchant.   2-3. An Access token is rquested for the Tigo Secre Server via the  GenerateAccessToken  service using the Apigee API Key  4-8.  Th Payment Authorzato Request is made with the necssary paymnt details, this will return a rdirect URL to the Tigo\nSecure Payment Authorizaton page which the customter has to be redirected    In case the MSISDN is not yet specified in the Payment Authorization request or in case the MSISDN was incorrect (non-existent) then the Customer is redirected to a page to enter the MSISDN.    (10-14) The MFS Account of the subscriber is validated after which the 'Verify' Page is shown. (see Figure 3-5) and a One-Time-Pin (Verification code) is sent via text message to the Tigo subscriber.  Figure 3-5: Enter verification code page   (15 - 16) The subscriber submits the verification code and after successful verification of the code the payment overview is shown to the customer requesting the Tigo MFS Account PIN.", 
            "title": "Payment Authorization via SMS verification code"
        }, 
        {
            "location": "/online_payments/#payment-overview-page", 
            "text": "(17-19) The customer provides the MFS PIN and the purchase call to make sure the payment is sent. \n(20) Upon receipt of a successful purchase response the access token is invalidated and a payment result page is shown for a limited duration     An optional callback URI is called with the final transaction status. This callback URI can be used in case the front-end server does not allow processing the financial transaction status.    The final redirect is done to the specified redirect URI.    The non-nominal cases for the Payment Authorization using SMS verification are shown below  Invalid Verification Code   When the subscriber enters the incorrect verification code a warning is shown \" Invalid Verification Code.__Please re-enter \" with the possibility to try again. The number of attempts is limited by the expiry time of the verification code.  Figure 3-8: Invalid Verification  Verification Code expired   In case the verification code expires a warning is shown  \" The code has now expired. Please make sure you have the__phone at hand and click below to resend the code.\"  with the option to resend a verification code. Resending the verification code is limited to 3 times.  Figure 3-9: verification code expired  Incorrect PIN code   In case the subscriber enters an incorrect PIN code a warning is displayed \" PIN was not valid. Please enter the__PIN again. \" The subscriber has three attempts to re-try.  After that the subscriber account will get blocked.", 
            "title": "Payment Overview Page"
        }, 
        {
            "location": "/online_payments/#payment-authorization-via-ussd-push", 
            "text": "In the following countries the payment is authorized via a USSD menu   Bolivia  El Salvador  Honduras  Paraguay   This USSD menu is pushed to the customer's mobile phone and requests to validate the transaction by sending the Tigo MFS PIN code. The flow is shown below:    Figure: Payment Authorization flow USSD Push   The subscriber/customer initiates a Tigo MFS payment via the Merchant.   (2-3) An Access token is requested for the Tigo Secure Server via the  GenerateAccessToken  service (Section 4.3.1) using the Apigee API Key and secret.   (4-7) The Payment Authorization Request is made with the necessary payment details    (Section 4.5.1) this will return a re-direct URL to the Tigo Secure Payment Authorization page to which the customer has to be redirected. The payment details page is shown in Figure 3-13.  Figure: Payment details     (8-10) The Customer submits the MISISDN and presses 'Confirm' to continue the transaction. A Purchase request is made which initiates a USSD session in which the Subscriber has to authorize the payment. The maximum duration is 5 minutes.  Figure: Pending Payment confirmation via USSD   (11-13) The Customer authorizes the payment via USSD and the transaction status page is shown for limited duration.  Figure: Payment result page    An optional callback URI is called with the final transaction status. This callback URI can be used in case the front-end server does not allow processing the financial transaction status.    The final redirect is done to the specified redirect URI.    Reverse Transaction    The Reverse Transaction Service can be used to reverse or refund a successful transaction made via the Online Payment.", 
            "title": "Payment Authorization via USSD Push"
        }, 
        {
            "location": "/online_payments/#api-specification", 
            "text": "", 
            "title": "API Specification"
        }, 
        {
            "location": "/online_payments/#introduction", 
            "text": "This section covers the API specifications. Each service is divided in a Request and Response section containing the overview of the parameters and example requests and responses. The list of error codes is included in Annex A.6.4.  The following third-level domains are available for the Tigo Secure services:  https://securesandbox.tigo.com/test  environment  https://secure.tigo.com/production  environment  In the sections below the service URLs are relative to these two Tigo Secure domains. For example for a service called 'service1' the following URL is specified in the API specification:  domain /v1/service1  To use service1 on the test environment use the URL:  https://securesandbox.tigo.com/v1/service1  and on the production environment:  https://secure.tigo.com/v1/service1   Generate Access Token Service   The Generate Access Token service is used to get a valid access token. The Millicom partner can only use the assigned API services via this access token. The access token has to be specified in each request header as described in the sub paragraphs below.  The validity of the access token is time limited and after each session the token is invalidated irrespective whether the service call resulted in a positive result or a failure. The expiry time is specified in the response.  4.3.1. Request  Generate Access Token Request     URL  /v1/oauth/generate/accesstoken?grant_type=client_credentials       Method  POST     Headers  Content-Type: application/x-www-form-urlencoded     Body  client_id= client_secret=      within the body:  is the unique client identifier as assigned during the registration process with Millicom  is the secret/password as provided during the registration process with Millicom", 
            "title": "Introduction"
        }, 
        {
            "location": "/online_payments/#response", 
            "text": "Average response time:  1 second  Maximum response time: 5 seconds  In case as valid client_id and client_secret are submitted the following response is returned:  HTTP response code: 200 OK JSON response body:     Parameter  Type  Description      accessToken  String  unique access token    issuedAt  Integer  Access Token issue Date and time as Unix time    expiresIn  Integer  Expiry time in seconds      Generate Access Token Response parameters  Example response:  Response code: 200 OK  Response body:  {\n   accessToken :   ABcdef123456ABcdef123456ABcd , \n   issuedAt :  1410268728383 ,\n   expiresIn :  599 ,\n}  In case incorrect client_id or client_secret are provided the following error is returned:  HTTP response code: 401 Unauthorized  JSON response body:     Parameter  Type  Description       ErrorCode  String  Error code     Error  String  Error description      Example response:  Response code: 401 Unauthorized  Response body:  {\n   ErrorCode  :  invalid\\_client ,\n   Error  : Client credentials are invalid \n}  System Status Service   The System Status Service is provided to monitor the health of the service periodically (heartbeat signal). The service returns the status of both the network connectivity and the application status to the Tigo Secure server and from the Tigo Secure Server to the Tigo Operations.", 
            "title": "Response"
        }, 
        {
            "location": "/online_payments/#request", 
            "text": "System Status Request        URL  /v1/tigo/systemstatus     Method  GET     Header  accessToken  valid access token        4.4.2. Response       Average response time:   1 second    Maximum response time:  5 seconds    HTTP response code:  200 OK         Parameter    #    Type    Description       tigoSecureStatusCode  1  Integer  Tigo Secure Server status code  0 = OK.  Any other number than 0 indicates a  problem occured    statusDescription  1  String  Description    TigoOperationStatus  0..n   Description    country  1  String  Three letter country code  (ISO 3166-1)    code  1  Integer  Tigo Secure Server status code   0 = OK  Any other number than 0 indicates a    problem occured       description  1  String  Description      Example response:  {\n   tigoSecureStatusCode  : 0, \n   statusDescription  :  OK , \n   TigoOperationStatus  :{\n    { country : TZA ,  code :0, \n       description : OK \n    } \n    { country : SEN , \n       code :0,  description : OK \n    }\n  }\n}", 
            "title": "Request"
        }, 
        {
            "location": "/online_payments/#payment-authorization-service", 
            "text": "", 
            "title": "Payment Authorization service"
        }, 
        {
            "location": "/online_payments/#request_1", 
            "text": "For the Tigo Secure Online Payment Authorization a redirect to the following URL has to be done including a JSON request with the required payment details:  Payment Authorization Request     URL  /v1/tigo/payment-auth/autorize       Method  POST     Header  Content-Type  application/json     accessToken  valid access token     JSON Request body:     Parameter  #  Type  Description      MasterMerchant  1      account  1  String  MFS Account number in the destination country   (account to credit)    pin  1  String  MFS Account PIN code    id  1  String  Identifier of master merchant (i.e. company name)  as provided by Millicom    Merchant  0..1  [optional]     reference  1  String  Reference of the originating merchant (company name)  in case the payment was made  on behalf of  another company    fee  0..1  Decimal  Merchant fee for the transaction in the origin currency.This fee is charged from the merchant Information about this fee will not be communicated to the subscriber. This information is confidential and is to be used for reconciliation    currencyCode  0..1  String  Currency code of the Merchant fee    Subscriber  1      account  1  String  MFS Account number (msisdn) of the paying  subscriber (account to debit)    countryCode  1  String  Country code dialing prefix (annex A.4)    country  1  String  Three letter country code  (ISO 3166-1 Annex A.2)    firstName  0..1  String  First name of the subscriber    lastName  0..1  String  Last name of the subscriber    emailId  0..1  String  [optional]  Email address    redirectUri  1  String  Redirection URI to redirect after completing the payment    callbackUri  0..1  String  [optional]  Result callback URI    language  1  String  Three letter code for the language    terminalId  0..1  String  [optional]  Terminal ID    originPayment  1      amount  1  Decimal  Total amount in the currency of the original  merchant payment    currencyCode  1  String  Currency code of the payment (see Annex A.1)    tax  1  Decimal  Tax for the transaction in the origin currency    fee  1  Decimal  Fee applied by the Master Merchant for the transaction in the origin currency. This fee is charged from the subscriber and will be shown to the subscriber. If no fee has been applied the field can be set to 0    exchangeRate  0..1  Decimal  [optional]  Exchange rate between the origin currency (currency of the sending country) and local currency (currency of the receiving country)    LocalPayment  1      amount  1  Decimal  Total amount in the local currency of the paying subscriber    currencyCode  1  String  Currency code of the MFS account of the paying subscriber (local currency)    transactionRefId  1  String  Reference Identifier in order to uniquely identify the transaction.      Sample Request:    {\n   MasterMerchant :{\n     account : 255321321321 ,\n     pin : 1234 ,\n     id : CompanyName \n  },\n   Merchant :{\n     reference : Amazon ,\n     fee : 23.45 ,\n     currencyCode : EUR \n  },\n   Subscriber :{\n     account : 255111111111 , \n     countryCode :  255 ,\n     country : tza ,\n     firstName : John ,\n     lastName : Doe ,\n     emailId  :  johndoe@mail.com \n  },\n   redirectUri : https://someapp.com/payment/redirecturi ,\n   callbackUri : https://someapp.com/payment/statuscallback ,\n   language : eng ,\n   terminalId : ,\n   originPayment :{\n     amount : 75.00 ,\n     currencyCode : USD ,\n     tax : 0.00 ,\n     fee : 25.00 \n    }\n   exchangeRate : 2182.23 ,\n   LocalPayment :{\n     amount : 218223.00 ,\n     currencyCode : TZS \n    },\n   transactionRefId : 0a1e39ab \n}  Make sure to  use the Access Token only * once  *to initiate a Payment  Authorization**. For each Payment Authorization request a new accesstoken has to be generated. This is because the access token is invalidated after the transaction completed. Any other additional transaction initiated with the same access token will therefore fail.  Per Payment Authorization make sure to  use a unique transaction  reference identifier  (transactionRefId) to identify the transaction. This will guarantee that the transaction is logged and traced correctly.", 
            "title": "Request"
        }, 
        {
            "location": "/online_payments/#response_1", 
            "text": "Average response time:  1 second  Maximum response time: 5 seconds  HTTP response code: 200 OK  JSON Response body:     Parameter  #  Type  Description      transactionRefId  1  String  Unique reference Identifier of the transaction    redirectUrl  1  String  Tigo Secure redirect URL which has to be used to  redirect the Customer to the correct Tigo Secure Payment Authorization webpage    authCode  1  String  Unique code to authenticate the transaction for the customer when redirecting    creationDateTime  1  String  Transaction Creation Date and Time", 
            "title": "Response"
        }, 
        {
            "location": "/online_payments/#payment-authorization-response-parameters", 
            "text": "Example response:  { transactionRefId : 0a1e39ab , redirectUrl :  https://securesandbox.tigo.com/v1/payment\\_auth/transactions?\u2026 auth\\_code=123123123 transaction\\_ref\\_id=0a1e39ab lang=eng , authCode  :  123123123 , creationDateTime : Fri, 10 Oct 2014 13:58:25 UTC \n}", 
            "title": "Payment Authorization Response parameters"
        }, 
        {
            "location": "/online_payments/#payment-status-callback", 
            "text": "After the customer completes the payment via Tigo Secure the status is reported back. This is done via the optional callback URI or \u2013 in case this callback URI has not been specified \u2013 in the redirect URI as specified in the Payment Authorization Request. The optional callback URI will be called reporting back the transaction status with the following parameters:     Method  POST      Headers  Content-Type: application/x-www-form-urlencoded    Body  trans_status= transaction status success/fail transaction_ref_Id= transaction_refID external_ref_id= external\\_ref\\_id mfs_id= mfs\\_id   verification_code= Access Token error_code= error\\_code        Parameter  Description      trans_status  Transaction status: success for a successful transaction  fail in case of a failed transaction    transaction_ref_id  Transaction Reference Identifier as specified in the request    external_ref_id  [optional]    mfs_id  [optional]  MFS Platform transaction id of the payment. This will only be sent back in case of a successful payment    verification_code  [optional]  The verification code is the invalidated  Access Token as generated at the start of the payment  authorization flow. This code has to be used to  uniquely identify that payment status is reported back by Tigo Secure.  Note that this access token is invalided after the  transaction failed/succeeded/expired so it can't be reused.  The verification code (Access Token) will be omitted  in case the transaction failed. This is to prevent that a malicious callback can be done with a modified  transaction status.    error_code  [optional]  The error code in case the transaction  failed. The error codes are defined in Annex A.6.4.1.", 
            "title": "Payment status callback"
        }, 
        {
            "location": "/online_payments/#payment-status-callback-parameters", 
            "text": "Successful payment callback example:  POST HTTP/1.1\n\nHost:  callback URI \n\nContent-Type: application/x-www-form-urlencoded\n\nCache-Control: no-cache\n\ntrans\\_status= **success**  transaction\\_ref\\_id=0a1e39ab  external\\_ref\\_id=38c1069f-2497-4f9c-9 mfs\\_id=CO140924.1414.A00113  **verification\\_code** =pfCIHgyWWg6qsUIOVFS u2HR3F4jy lang=eng  The verification code in the status callback is the invalidated  Access Token as generated at the start of the payment transaction.  In order to confirm that successful payment status has been reported back by Tigo Secure the following steps have to be performed:    Lookup the payment transaction using the transaction_ref_id    Compare the verification_code against the original access token as used during the transaction    Only when the verification_code is equal to the original access token can the payment be treated as successful.    In case of a  mismatch  between the verification code and the access token the transaction should be  treated as failed  and  reported back to Millicom. The external_ref_id and transaction_id can be used for traceability of the transaction within the Millicom Tigo Operation.  Failed payment example:  POST HTTP/1.1\n\nHost:  callback URI \n\nContent-Type: application/x-www-form-urlencoded\n\nCache-Control: no-cache\n\ntrans\\_status= **fail**  transaction\\_ref\\_id=0a1e39ab-d0ec -4f8b-9746-b2c4122220b2123 error\\_code= purchase-3008-30434-E   For a failed transaction the verification code (access token) is not reported back. This is to prevent a malicious callback with a modified transaction status.  After the payment status callback a HTTP redirect will be done to the URI as specified in the redirectUri parameter in the Payment Authorization Request without any extra parameters.  Note that in case no callbackUri was specified in the original request the payment status is reported back in the redirectUri in the manner as for the callback URI explained above.  Validate MFS Account Service  The Validate MFS Account Service can be used to check whether the subscriber has a valid MFS account in the designated country. The request requires the subscriber MSISDN, first name and last name and country code as shown below.   Request  Validate MFS Account Request     URL  /v1/tigo/mfs/validateMFSAccount       Method  POST     Header  Content-Type  application/json     accessToken  valid access token     JSON Request body:     Parameter  Cardinality  Type  Description      transactionRefId  1  String  Reference Identifier in order to uniquely identify the transaction    ReceivingSubscriber  1      account  1  String  MFS Account to validate of the receiving subscriber    countryCallingCode  1  Integer  County Calling code    countryCode  1  String  Three letter country code (ISO 3166-1)    firstName  0..1  String  [optional]  First name of the subscriber    lastName  0..1  String  [optional]  Last name of the subscriber", 
            "title": "Payment status callback parameters"
        }, 
        {
            "location": "/online_payments/#table-6-validate-mfs-account-request-parameters", 
            "text": "Example request:  {\n   transactionRefId  :  1300074238 , \n   ReceivingSubscriber  :{\n     account  :  255658123964 , \n     countryCallingCode  :  255 , \n     countryCode  :  TZA , \n     firstName  :  John , \n     lastName  :  Doe \n  }\n}  Response  Average response time:3 seconds  Maximum response time: 5 seconds  HTTP response code: 200 OK  JSON response body:     Parameter  Type  Description      ValidateMFSAccountResponse      ResponseHeader      GeneralResponse      correlationID  String  The is the transaction id as sent in the request    status  String  Status of executing the account validation request (OK, ERROR)    code  String  Status code of the account validation     description  String  Technical and brief description of the result    ResponseBody      validMFSAccount  String  MFS account validation status true = account valid for provided details     Table 7: Validate MFS Account Reponse parameters  The following response is returned for a valid MFS account:  HTTP response code: 200 OK   JSON response body:  { ValidateMFSAccountResponse :\n  {\n   ResponseHeader :\n    {\n     GeneralResponse :\n      {\n       correlationID :1234,\n       status : OK , \n       code : Validatemfsaccount-3018-0000-S , \n       description : Provided MSISDN is a valid MFSAccount. \n      }\n    },\n   ResponseBody :\n    {\n     validMFSAccount : true \n    }\n  }\n}  In case of an invalid (non-existent) MFS account the follow response is returned:  HTTP response code: 500 Internal Server Error  JSON response body:  {\n   Fault :{\n     faultcode :  env:Server ,\n     faultstrn :  Subscriber not found ,\n     detail :{\n      ValidateMFSAccountFault :{\n       ResponseHeader :{\n         GeneralResponse :{\n           correlationID : 1300074238,\n           status :  ERROR ,\n           code :  Validatemfsaccount-3018-3001-E , \n           description :  Subscriber not found \n        }\n      }\n     }\n    }\n  }\n}", 
            "title": "Table 6: Validate MFS Account Request parameters"
        }, 
        {
            "location": "/online_payments/#deposit-remittance-service", 
            "text": "With the Deposit Remittance Service the money for the international remittance in deposited in the subscriber's wallet. The partner wallet is debited and the subscriber wallet is credited for the amount in the local currency as specified in the request. The response will confirm success of failure of the money deposit which includes a unique Transaction ID from the MFS platform.   Request  Deposit Remittance Request     URL  /v1/tigo/mfs/depositRemittance       Method  POST     Header  Content-Type  application/json     accessToken  valid access token     JSON request body:     Parameter  #  Type  Description      transactionRefId  1  String  Unique Transaction Reference Identifier    PaymentAggregator  1      account  1  String  MFS Account number in the destination  country    pin  1  String  MFS Account PIN code    id  1  String  Identifier of the payment aggregator (i.e.    company name as provided by Millicom       Sender  0..1  [optional]     firstName  1  String  First name of the Sender. This field can be left blank in case the information is not available.    lastName  1  String  Last name of the Sender. This field can be left blank in case the information is not available.    msisdn  0..1  String  [optional]  MSISDN of the Sender    emailAddress  0..1  String  [optional]  e-mail address of the Sender        Parameter  #  Type  Description      ReceivingSubscriber  1      account  1  String  MFS Account of the receiving subscriber    countryCallingCode  0..1  Integer  [optional]  Country Calling code    countryCode  1  String  Three letter country code (ISO 3166-1 Annex A.2)    firstName  1  String  First name of the subscriber    lastName  1  String  Last name of the subscriber    OriginPayment  0..1  [optional]     amount  1  Decimal  Total amount in the currency of the sending country    currencyCode  1  String  Currency code of the sending country    tax  1  Decimal  Tax for the transaction in the origin currency    fee  1  Decimal  Fee for the transaction in the origin currency    exchangeRate  0..1  Decimal  [optional]  Exchange rate between the origin currency (currency of the sending country) and local currency (currency of the receiving country)    verificationRequest  0..1  Boolean  [optional]  Verification flag (true/false). This feature is currently not supported. Only set to false otherwise the transaction will fail    sendTextMessage  0..1  Boolean  [optional]  Flag to indicate whether a text message has to be sent (sendTextMessage= true) to the receiving subscriber in the following cases: Successful deposit: informing the subscriber received an international remittance with the amount, remittance partner and optionally the name of the sender. Unsuccessful deposit cause by the subscriber not signed up for a MFS account: informing the subscriber an international remittance was missed with the amount, remittance partner and optionally the name of the sender and the suggestion to open an MFS account.    LocalPayment  1      amount  1  Decimal  Total amount to payout in the local currency of the receiving subscriber (see Annex A.5 for formatting)    currencyCode  1  String  Currency code of the receiving country (see Annex A.1)     Table Deposit Remittance Request parameters  Example Deposit Remittance Request  \n{  transactionRefId  :  1300074238 , PaymentAggregator  : \n  {\n   account  :  255123123123 , \n   pin  :  1234 ,\n   id  :  Company Name \n  }, Sender  : {\n   firstName  :  Jane , \n   lastName  :  Doe , \n   msisdn  :  2551234123423 ,\n   emailAddress  :  janedoe@mail.com \n  }, \n   ReceivingSubscriber  : {\n   account  :  255111111111 , \n   countryCallingCode :  255 , \n   countryCode  :  TZA , \n   firstName  :  John , \n   lastName  :  Doe \n  }, OriginPayment  : { \n   amount  :  100.00 , \n   currencyCode  :  EUR , \n   tax  :  10.00 ,\n   fee  :  25.00 \n  },\n   exchangeRate  :  2182.23 , \n   verificationRequest  :  true , \n   sendTextMessage  :  true , \n   LocalPayment  : {\n     amount  :  200 , \n     currencyCode  :  TZS \n  }\n}  Response  Average response time:3 seconds  Maximum response time: 5 seconds  HTTP response code: 200 OK  JSON response body:     Parameter  Type  Description      DepositRemittanceResponse      ResponseHeader      GeneralResponse      correlationID  String  The is the transaction id as sent in the request    status  String  Status of executing the account validation request (OK, ERROR)    code  String  Status code of the account validation (see codes below)    description  String  Technical and brief description of the result    ResponseBody      transactionId  String  Transaction Identifier from the MFS Platform     Table: Deposit Remittance Response parameters  Example Response  {\n   DepositRemittanceResponse :{\n     ResponseHeader :{\n       GeneralResponse :{\n         correlationID :1300074238,\n         status : OK , \n         code : depositremittance-3017-0000-S ,\n         description : The Transaction is completed successfully. \n      }\n    },\n     ResponseBody :{\n       transactionId : CO140912.1700.A00059 \n    }\n  }\n}  Reverse Transaction service  Reverse Transaction Request     URL  /v1/tigo/mfs/reverseTransaction      Method  POST    Header  accessToken  valid access token     JSON request body:     Parameter  #  Type  Description      MasterAccount  1      account  1  String  The MFS account of the Master Merchant /Payment Aggregator as used in the original request Payment Request or Deposit Remittance API request    pin  1  String  MFS Account PIN code for the Master Account    id  1  String  Identifier of Master Merchant (i.e. company name) as provided by Millicom    transactionRefId  1  String  Transaction Reference Identifier as submitted in the request (transactionRefId)    mfsTransactionId  1  String  The MFS Transaction Identifier for the transaction this maps to the Payment Authorization status callback mfs_idvalue or the DepositRemittanceResponse  [transactionId]    countryCode  1  String  Three letter country code(ISO 3166-1 Annex A.2)    subscriberAccount  0..1  String  MFS Account of the subscriber (MSISDN) Authorization or    LocalPayment  0..1  [optional]     amount  1  Decimal  Total amount of the transaction in the local currency (see Annex A.5 for the formatting)    currencyCode  1  String  Currency code of the Tigo country (see Annex     Table: Reverse Transacton Request parameters  Example request:  {\n   MasterAccount  :{\n     account  :  255321321321 , \n     pin  :  1234 ,\n     id  :  CompanyName \n  },\n   transactionRefId  :  0a1e39ab , \n   mfsTransactionId  :  CO140924.1414.A00113 , \n   countryCode  :  tza ,\n   subscriberAccount  :  255111111111 ,\n   LocalPayment  :{\n     amount  :   218223.00 , \n     currencyCode  : TZS \n  }\n}  Response", 
            "title": "Deposit Remittance Service"
        }, 
        {
            "location": "/online_payments/#payment-authorization-transaction-status-service", 
            "text": "Get Transaction Status Request     URL  /v1/payment-auth/transactions/      Method  GET    Header  accessToken      with   the MasterMerchant Identifier and transaction reference ID as specified in the Payment Authorization Request. For example when the below values were provided in the original Payment Authorization Request (Section 4.5.1):  MasterMerchant :{ id :  **Company Name**  transactionRefId :  **0a1e39ab**   The example request to retrieve the payment authorization transaction status will be in that case:  GET /v1/payment-auth/transactions/ **Company Name0a1e39ab** HTTP/1.1\n\nHost:  host \n\naccessToken:  accessToken  Cache-Control: no-cache  Response    Average response time:  1 second  Maximum response time: 5 seconds  HTTP response code: 200 OK  JSON response body:     Parameter  #  Type  Description      Transaction  refId  1  String    externalRefId  0..1  String  [optional]  Tigo transaction Id of the request and responses between the internal servers. This will only be returned for successful transactions    mfsId  0..1  String  [optional]  MFS Platform transaction id of the payment. This will only be returned for successful transactions in the following format: Fri, 10 Oct 2014 13:58:25 UTC    Status  1  String  Transaction status: Success Fail    completedOn  1  Date  Completion date and time of the transaction in the following format:Fri, 10 Oct 2014 13:58:54 UTC    MasterMerchant  1      account  1  String  MFS Account number in the destination country (account to credit)    id  1  String  Identifier of master merchant (i.e. company name)    Merchant  0..1  [optional]     reference  1  String  Reference of the originating merchant (company name) in case the payment was made on behalf of another company    fee  1  Decimal  Merchant fee for the transaction in the origin currency    currencyCode  1  String  Currency code of the Merchant fee (see Annex A.1)    Subscriber  1      account  1  String  MFS Account number (msisdn) of the paying subscriber (account to debit).    countryCode  1  String  Country code dialing prefix    country  1  String  Three letter country code (ISO 3166-1 Annex A.2)    firstName  1  String  First name of the subscriber    lastName  1  String  Last name of the subscriber    emailId  0..1  String  [optional]  Email address    redirectUri  1  String  Redirection URI to redirect after completing the payment    callbackUri  0..1  String  [optional]  Result callback URI    language  1  String  Three letter code for the language (ISO 639-3 see Annex 0)    terminalId  0..1  String  [optional]  Terminal ID    OriginPayment  1      Amount  1  Decimal  Total amount in the currency of the sending country    currencyCode  1  String  Currency code of the payment (see Annex A.1)    tax  1  Decimal  Tax for the transaction in the origin currency    fee  1  Decimal  Fee applied by the Master Merchant for the transaction in the origin currency    exchangeRate  0..1  Decimal  [optional]  Exchange rate between the origin currency (currency of the sending country) and local currency (currency of the receiving country)    LocalPayment  1      amount  1  Decimal  Total amount in the local currency of the paying subscriber    currencyCode  1  String  Currency code of the sending country     Table: Payment Authorization Transaction Status Response parameters  Sample Payment Authorization Transaction Status response:  { Transaction  :{\n     refId : 0a1e39ab-d0ec-4f8b-9746-b2c4122220b2c120ww40 , \n     externalRefId  :  38c1069f-2497-4f9c-9 ,\n     mfsId  :  CO140924.1414.A00113 ,\n     createdOn  :  Fri, 10 Oct 2014 13:58:25 UTC ,\n     status  :  success ,\n     completedOn  :  Fri, 10 Oct 2014 13:58:31 UTC ,\n  }, MasterMerchant :{\n     account : 255321321321 ,\n     id : Skrill Ltd \n  }, Merchant :{\n   reference : Acme,Inc ,\n   fee : 23.45 ,\n   currencyCode : TZS ,\n  } Subscriber :{\n   account : 255111111111 ,\n   countryCode :  255 ,\n   country : tza ,\n   firstName : John ,\n   lastName : Doe ,\n   emailId  :  johndoe@mail.com \n  },\n   redirectUri : https://someapp.com/payment/redirecturi ,\n   callbackUri :  https://someapp.com/payment/statuscallback ,\n   language : eng ,\n   terminalId : ,\n   originPayment :\n  {\n     amount : 75.00 ,\n     currencyCode : USD ,\n     tax : 0.00 ,\n     fee : 25.00 \n  },\n   exchangeRate : 2182.23 ,\n   LocalPayment :{\n     amount : 218223.00 ,\n     currencyCode : TZS \n  }\n}  Deposit Remittance Transaction Status service     Get Deposit Remittance Transaction Status Request       URL  /v1/tigo/mfs/depositRemittance/transactions/    Method  GET    Header  accessToken      with   the Payment Aggregator Identifier and transaction reference ID as specified in the Deposit Remittance Request. For example when the below values were provided in the original Payment Authorization Request:  {  transactionRefId  :  **1300074** , PaymentAggregator  : {\n   id  :   **Company Name** \n  }\n}  Example request:  GET /v1/tigo/mfs/depositRemittance_/transactions/__ **Company Name** _ **1300074**\nHTTP/1.1\nHost:  host \naccessToken: _ accessToken _\nCache-Control: no-cache  Response  Average response time:  1 second  Maximum response time: 3 seconds  HTTP response code: 200 OK  JSON response body:     Parameter  #  Type  Description      Transaction  1      refId   String  Unique Transaction Reference Identifier as provided in the initial request    status  1   Transaction status success/ fail    mfsId  1  String  MFS Platform transaction id of the payment    errorCode  0..1  String  Error code in case of a failed transaction    PaymentAggregator  1      account  1  String  MFS Account number in the destination country    id  1  String  Identifier of the payment aggregator (i.e.    Sender  0..1      firstName  1  String  First name of the Sender    lastName  1  String  Last name of the Sender    msisdn  0..1  String  [optional]  MSISDN of the Sender    emailAddress  0..1  String  [optional]  e-mail address of the Sender    ReceivingSubscriber  1      account  1  String  MFS Account of the receiving subscriber    countryCallingCode  0..1  Integer  [optional]  Country Calling code    countryCode  1  String  Three letter country code (ISO 3166-1 Annex A.2)    firstName  1  String  First name of the subscriber    lastName  1  String  Last name of the subscriber    OriginPayment  0..1   [optional]    amount  1  Decimal  Total amount in the currency of the sending country    currencyCode  1  String  Currency code of the sending country (see Annex A.1)    tax  1  Decimal  Tax for the transaction in the origin  currency    fee  1  Decimal  Fee for the transaction in the origin currency    exchangeRate  0..1  Decimal  [optional]  Exchange rate origin payment currency and local payment currency    verificationRequest  0..1  Boolean  [optional]  currently not used    sendTextMessage  0..1  Boolean  [optional]  Flag to send text message after complete the transaction    localPayment  1      amount  1  Decimal  Total amount to payout in the local currency of the receiving subscriber    currencyCode  1  String  Currency code of the receiving country (see     Example Response:  { Transaction : {\n   refId :  1300074239 , \n   status :  success ,\n   mfsId :  CI141127.2125.A03951 \n},  PaymentAggregator  :{\n   account  :  255123123123 ,\n   id  :  CompanyName \n},  Sender  :{\n   firstName  :  Jane ,\n   lastName  :  Doe ,\n   msisdn  :  441512121212 ,\n   emailAddress  :  janedoe@mail.com \n},  ReceivingSubscriber  :{\n   account  :  255111111111 ,\n   countryCallingCode  :  255 ,\n   countryCode  :  TZA ,\n   firstName  :  John ,\n   lastName  :  Doe \n},  OriginPayment  :{\n   amount  :  100.00 ,\n   currencyCode  :  EUR ,\n   tax  :  10.00 ,\n   fee  :  25.00 \n}, exchangeRate  :  2182.23 , verificationRequest  :  false , sendTextMessage  :  true ,\n   localPayment  :{\n     amount  :  5555 ,\n     currencyCode  :  TZS \n  }\n}", 
            "title": "Payment Authorization Transaction Status service"
        }, 
        {
            "location": "/online_payments/#currency-codes", 
            "text": "The Millicom supported currency codes are according to the ISO 4217 standard.   Currency codes     Code  Currency      BOB  Boliviano    CDF  Congolese franc    COP  Colombian peso    EUR  Euro    GHS  Ghanaian cedi    GTQ  Guatemalan quetzal    PYG  Paraguayan guaran\u00ed    RWF  Rwandan franc    TZS  Tanzanian shilling    USD  United States dollar    XAF  CFA franc BEAC    XOF  CFA Franc", 
            "title": "Currency Codes"
        }, 
        {
            "location": "/online_payments/#country-codes", 
            "text": "The Millicom supported country codes are according to the ISO 3166-1 alpha-3 standard.     Code  Country      BOL  Bolivia, Plurinational State of    COD  Congo, the Democratic Republic of the    COL  Colombia    GHA  Ghana    GTM  Guatemala    HND  Honduras    PRY  Paraguay    RWA  Rwanda    SEN  Senegal    SLV  El Salvador    TCD  Chad    TZA  Tanzania, United Republic of", 
            "title": "Country Codes"
        }, 
        {
            "location": "/online_payments/#language-codes", 
            "text": "The Millicom supported language codes are according to the ISO 639-3 standard.     Code  Language      ara  Arabic    aym  Aymara    cab  Garifuna    emk  Eastern Maninkakan    eng  English    fra  French    ful  Fulah    grn  Guarani    jod  Wojenaka    jud  Worodougou    kfo  Koro (C\u00f4te d'Ivoire)    kga  Koyaga    kin  Kinyarwanda    lin  Lingala    lua  Luba-Lulua    miq  M\u00edskito    mku  Konyanka Maninka    msc  Sankaran Maninka    mxx  Mahou    mzj  Manya    que  Quechua    snk  Soninke    spa  Spanish    srr  Serer    swa  Swahili (macrolanguage)    wol  Wolof", 
            "title": "Language Codes"
        }, 
        {
            "location": "/online_payments/#country-calling-codes", 
            "text": "Country  Calling code      Bolivia, Plurinational State of  591    Congo, the Democratic Republic of the  243    Colombia  57    Ghana  233    Guatemala  502    Honduras  504    Paraguay  595    Rwanda  250    Senegal  221    El Salvador  503    Chad  235    Tanzania, United Republic of  255", 
            "title": "Country Calling Codes"
        }, 
        {
            "location": "/online_payments/#amount-format-convention", 
            "text": "The amounts in the API requests are formatted according to the following standard:  ######.##  Whereby . (dot) will be used as the separator character for decimals (cents). No separator character is required (allowed) for thousands.", 
            "title": "Amount Format Convention"
        }, 
        {
            "location": "/online_payments/#result-and-error-codes", 
            "text": "", 
            "title": "Result and error codes"
        }, 
        {
            "location": "/online_payments/#http-status-codes", 
            "text": "The supported HTTP Status codes are shown in the table below.     Code  Message  Type  Description      200  OK  Success  Returned for all Successful Responses    400  Invalid Request  Error  One or more of the input mandatory fields are missing. Display an Invalid Request screen.    401  Unauthorized  Error  API Key is not valid    403  Forbidden  Error  API Key in not subscribed to service    405  Method Not Allowed  Error  Served for Methods other than POST    406  Not Acceptable  Error  Accept Header does not comply with x-www-form-urlencoded    500  Internal Server Error  Error  Any Error that is returned from the back-end systems (see next subparagraphs) or errors that are not covered by this list    505  HTTP Version Not Supported  Error  For Requests not on HTTP/1.1 protocol", 
            "title": "HTTP status codes"
        }, 
        {
            "location": "/online_payments/#general-error-codes", 
            "text": "", 
            "title": "General error codes"
        }, 
        {
            "location": "/online_payments/#ip-address-not-whitelisted", 
            "text": "The response below will be returned in case the IP address has not been whitelisted for the service called. Contact Millicom in order to add the correct IP address to the required services.  Status code: HTTP/1.1 403 Forbidden  {\n   fault :{\n       faultstring : Access Denied for client ip : _ IP address _ , \n     detail :{\n       errorcode : accesscontrol.IPDeniedAccess \n    }\n  }\n}", 
            "title": "IP address not whitelisted"
        }, 
        {
            "location": "/online_payments/#invalid-request", 
            "text": "In case the header or JSON request body is incorrect the error as shown below will be returned. Please check the request is  Status code: HTTP/1.1 400 Bad Request  {\n  ErrorCode:  invalid\\_request ,\n  Error:  Missing required parameter transactionRefId \n}", 
            "title": "Invalid Request"
        }, 
        {
            "location": "/online_payments/#invalid-access-token", 
            "text": "The following error is returned in case an invalid Access Token is provided  Status code: HTTP/1.1 401 Unauthorized    Invalid accessToken. Please enter valid token.  Access Token Expired  The following error is returned in case an invalid Access Token is provided  Status code: HTTP/1.1 401 Unauthorized  Expired accessToken. Please enter valid token.  Transaction Reference ID already used  The error below is returned in case Transaction Reference ID has already been used for a previous transaction.  Status code: HTTP/1.1 400 Invalid Request  { ErrorCode :  invalid\\_request , Error :  transactionRefId already exists \n}  A.6.3. API Permission error  The error below is returned in case the API has not been activated for the given Client_id and secret.  Status code: HTTP/1.1 401 Invalid Request  You don't have permission to access \u2026 API. Please contact Millicom admin  Service specific result and error codes  The subsections below list the Result and Error codes per service. The nominal (successful) cases are covered in Section 4.  In case of an error a JSON response is returned with the following structure:  {\n   Fault :{\n     faultcode : env:Server , \n     faultstring : _ error description _ ,\n     detail :{\n       ValidateMFSAccountFault :{\n       ResponseHeader :{\n         GeneralResponse :{\n           correlationID :_ Tigo correlation ID _,\n           status : ERROR ,\n           code : _ error code _ ,\n           description : _ error description _\n          }\n        }\n      }\n    }\n  }\n}  The error code provide in the \"code\" field has the following format:  API - APIID - ERROR CODE - TYPE OF FAULT  where  API \u2013 Tigo API name  APIID \u2013 unique numeric identifier of the API within Tigo  Error code \u2013 based on the range and the fault type .  Type of fault with:  E \u2013 business fault \u2013 3000 range  F \u2013 fatal errors (such as network related faults) 2000 range  V \u2013 validation fault \u20134000 range  S \u2013 Success \u20130000 range  W \u2013 warning (scenarios such as partial responses) \u2013 6000 range  Authorization Service result codes     Description        00-S  Successful Payment      Description  Error Category    01-F  Backend System error  Backend Error caused the transaction to be terminated    02-F  Transaction timed out  The transaction timed out caused by timing out    11-E  Unable to complete transaction invalid amount  Unable to complete transaction due to invalid amount    43-E  Transaction not authorized  The customer did not authorize and therefore the transaction failed, this can be caused by the customer not authorizing payment, incorrect verification code, insufficient balance etc.    45-E  Cancel Transaction  The customer doesn't wish to continues with the transaction and wants to cancel it at its current state     FS Account Service result codes     Description        t-3018-0000-S  Provided MSISDN is a valid MFS Account.      Description   Error Category    t-3018-4501-V  Invalid request, please check the input  and resubmit  OSB Validation Error    t-3018-3001-E  Backend error description  Backend Error    t-3018-2501-F  One or more backends may be down. Please try again later  Connection Error    t-3018-2502-F  Service call has timed out, Please try again later  Timeout error    t-3018-2505-F  Service Authentication failed  OWSM Authentication Failure    t-3018-2506-F  Customer is not authorized to use this service  OWSM Authenticaton Failure    t-3018-3603-E  Internal Service Error has occured  Internal Service Error    t-3018-3999-E  Unknown/Uncaught Error has occured  Unknown/Uncaught Error has occured    t-3018-4502-V  Invalid ISD code passed in the MSISDN  Validation Error    t-3018-4503-V  Web Service Implementation is not available for this countr  Validation Error    t-3018-4504-V  Required additional parameters are not passed in the request  When the required additonal parameters are not passed in the request    t-3018-4505-V  Duplicate Additional parameters passed in the request  When the required additional parameters are passed in the request repeatedly    t-3018-4506-V  Invalid consumerId passed in the request  When the consuming application id passed is invalid     Remittance Service result codes     Description        -3017-0000-S  The Transaction is completed successfully      Description  Error Category    -3017-2501-F  One or more back ends may be down. Please try again later  Connection Error. This is a Tigo internal error, This is treated as 'Service not available'    -3017-2502-F  Service call has timed out. Please try again later  Timeout error    -3017-2505-F  Service Authentication Failed.  OWSM Authentication Failure. This is a Tigo error and should be treated as 'Service not available    -3017-2506-F  Consumer is not authorized to use this service  OWSM Authentication Failure. This is a Tigo error and should be treated as 'Service not available'    -3017-3001-E  Backend error description  Uncaught error from the Tigo MFS Platform, this should be treated as 'Service not available'    -3017-3002-E  Authorization failed  The authorization for the transaction with this Account details failed. Check the account details, or make a new request. If the error persists contact Tigo    -3017-3003-E  Password expired  The PIN/Password for the MFS account expired, please contact Tigo to reset the PIN    -3017-3004-E  Sender account suspended  The MFS Account has been suspended. Contact Tigo to resolve    -3017-3005-E  Sender account does not exist  The provided MFS Account does not exist on the platform in the country. Check the MFS Account and send a new transaction. If error persists resolve    -3017-3006-E  Receiver Account suspended  The receiving MFS account has been suspended therefore a remittance is not possible to this account    -3017-3007-E  Receiver Account does not exist  The receiving MFS account does not exist and remittance is not possible to this account.    -3017-3008-E  Invalid amount specified  An invalid amount has been specified, send in a new transaction with a correct amount.    -3017-3009-E  Maximum balance threshold for receiver  The balance of the receiving MFS account has been exceeded and therefore a remittance is not possible to this account    -3017-3010-E  Maximum number of transaction for receiver account has been reached  The maximum number of transactions of the account has been reached and therefore a remittance is not possible to this account    -3017-3011-E  Maximum number of transaction for sender account reached  The maximum number of transactions of the account has been reached and therefore a remittance to this account is not possible    -3017-3012-E  Transaction amount is less than the minimum transaction limit  The amount as passed in the request is less than the minimum transaction limit    -3017-3013-E  Maximum transaction limit exceeded  The amount as passed in the request is more than the maximum transaction limit.    -3017-3014-E  Sender and receiver account are the same  The sender and receiver accounts as specified in the request are the same.    -3017-3015-E  Service timeout  The request to deposit the remittance has timed out, therefore has not been completed.    -3017-3016-E  Insufficient funds  The account used for sending funds has insufficient funds for the case of the Payment aggregator account this should not occur, if it does, Millicon has to be contacted    -3017-3017-E  Insufficient account permission  The account has insufficient permission to perform the deposit remittance. In case of the Payment aggregator account this should not occur, if it does, Millicon should be contacted    -3017-3018-E  User not found  The account specified in the request cannot be found    -3017-3603-E  Internal service error has occurred.  Internal service error. This is a Tigo internal error, and should be treated as 'Service not available'    -3017-3999-E  Unknown/Uncaught error has occurred.  Unknown/Uncaught error has occurred. Thiis a tigo internal error and should be treated as 'Service not availabe'    -3017-4002-V  Invalid amount passed in the request.  When the amount is less than or equal to zero", 
            "title": "Invalid Access Token"
        }, 
        {
            "location": "/partner_integration/", 
            "text": "API Details\n\n\nThe transport protocol of this interface is XML over HTTP.  The expected HTTP method is always POST.\n\n\nThe expected headers in the request \n response are\n\n\n'Content-\u00ad\u2010type' \n 'Connection'.\n\n\nRequest XML\n\n\n A request to perform a function is sent using the COMMAND element. \n\n\nPOST \n HTTP \n\n\nContent-\u00ad\u2010type: text/xml \n\n\nConnection: keep-\u00ad\u2010alive \n\n\n?xml version=\n1.0\n?\n\n  \nCOMMAND\n\n  -\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010\n  -\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010\n  -\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010\n  \n/COMMAND\n\n\n/xml\n\n\n\n\n\nResponse XML\n\n\nThe response to a request to perform a function uses the COMMAND element.\n\n\nHTTP/1.1 200 OK\n\n\nContent-\u00ad\u2010type: text/xml\n\n\nConnection: close\n\n\n?xml version=\n1.0\n?\n\n  \nCOMMAND\n\n  -\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010\n  -\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010\n  -\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010\n  \n/COMMAND\n\n\n/xml\n\n\n\n\n\nPartner Integration (A2W \n W2A) API Details \n\n\nUse Case 1: Wallet to Account / TIGO to Partner (Pay amount from Subscriber's TIGOPESA wallet to Partner Collection account through Payment Gateway) \u2013 Synchronous\n\n\nInput to the Partner Application from the Payment Gateway \u2013 SYNC_BILLPAY_API Request\n\n\n\n\n\n\n\n\nField\n  \nname\n\n\nMax-\u00ad\u2010length\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nTYPE\n\n\nNA\n\n\nThe request type of the transaction. The valuewill be constant in all the request. Ex -\u00ad\u2010 SYNC_BILLPAY_REQUEST\n\n\n\n\n\n\nTXNID\n\n\n20\n\n\nAlphanumeric-\u00ad\u2010This field will be Tigo transaction ID. It will be unique for all transactions. Ex -\u00ad\u2010 BP140218.1240.B01530\n\n\n\n\n\n\nMSISDN\n\n\n10/12\n\n\nPayer MSISDN should be without country code. Ex \u2013 0721777777 or 255721777777\n\n\n\n\n\n\nAMOUNT\n\n\nNA\n\n\nNumeric, Ex -\u00ad\u2010 1000\n\n\n\n\n\n\nCOMPANYNAME\n\n\n6\n\n\nNumeric. This is the business number, or biller code Ex \u2013 12345\n\n\n\n\n\n\nCUSTOMERREFERENCEID\n\n\n50\n\n\nBill pay reference number, normally generated/shared by partner application. This is used by partner application to validate payments. Alphanumeric characters.Ex \u2013 T1234ABC\n\n\n\n\n\n\n\n\nSample request message from the Payment Gateway to Partner Application 'SYNC_BILLPAY_API' is here.\n\n\n?xml version=\n1.0\n?\n\n  \nCOMMAND\n \n    \nTYPE\nSYNC\\_BILLPAY\\_REQUEST\n/TYPE\n\n    \nTXNID\ntigo\\_txnID\n/TXNID\n\n    \nMSISDN\nuser\\_msisdn\n/MSISDN\n\n    \nAMOUNT\namount\n/AMOUNT\n\n    \nCOMPANYNAME\ncopny\\_ID\n/COMPANYNAME\n\n    \nCUSTOMERREFERENCEID\nPartner\\_reference\\_number\n/CUSTOMERREFERENCEID\n\n  \n/COMMAND\n\n\n/xml\n\n\n\n\n\nOutput from the Partner Application to the Payment Gateway System\n\n\u2013 \nSYNC_BILLPAY_API Response\n\n\n\n\n\n\n\n\nField\n  \nname\n\n\nMax-\u00ad\u2010length\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nTYPE\n\n\nNA\n\n\nThe response type of the transaction. The value will be constant in all the response. Ex \u2013 SYNC_BILLPAY_RESPONSE\n\n\n\n\n\n\nTXNID\n\n\n20\n\n\nTigo Transaction ID sent in the request. Ex -\u00ad\u2010 BP140218.1240.B01530\n\n\n\n\n\n\nREFID\n\n\n50\n\n\nPartner Application generated Transaction ID. It should be unique for all transaction.Ex -\u00ad\u2010 000217605331\n\n\n\n\n\n\nRESULT\n\n\n2\n\n\nStatus of the transaction. String value. Ex \u2013 Either TS or TF\n\n\n\n\n\n\nERRORCODE\n\n\n20\n\n\nParticular Error Code returned in the transaction. Will be Alphanumeric.Ex -\u00ad\u2010 error000 for success\n\n\n\n\n\n\nERRORDESCRIPTION\n\n\nNA\n\n\nError Description (String). Ex-\u00ad\u2010 Transaction Successful\n\n\n\n\n\n\nMSISDN\n\n\n10\n\n\nNumeric -\u00ad\u2010 Subscriber (Payer) phone number Ex \u2013 0656856028\n\n\n\n\n\n\nFLAG\n\n\n1\n\n\nString value.Ex \u2013 Either Y or N\n\n\n\n\n\n\nCONTENT\n\n\nNA\n\n\nAlphanumeric field may be present under this field Maximum 140 characters No special characters like pipe('\n\n\n\n\n\n\n\n\nSample response message from the Partner Application to the Payment Gateway 'SYNC_BILLPAY_API' is\n\n\n?xml version=\n1.0\n?\n\n  \nCOMMAND\nTYPE\nSYNC\\_BILLPAY\\_RESPONSE\n/TYPE\n\n  \nTXNID\nBP140218.1240.B01530\n/TXNID\n\n  \nREFID\n000217605331\n/REFID\n\n  \nRESULT\nTS\n/RESULT\n\n  \nERRORCODE\nerror000\n/ERRORCODE\n\n  \nERRORDESC/\n\n  \nMSISDN\n0714405395\n/MSISDN\n\n  \nFLAG\nY\n/FLAG\n\n  \nCONTENT\nmessage\\_content.\n/CONTENT\n\n  \n/COMMAND\n\n\n/xml\n\n\n\n\n\nThe following are the list of expected \nERRORCODE\n and its description from Partner Application:\n\n\n\n\n\n\n\n\nError Code\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nerror000\n\n\nSuccessful transaction\n\n\n\n\n\n\nerror001\n\n\nService not available\n\n\n\n\n\n\nerror010\n\n\nInvalid Customer Reference Number\n\n\n\n\n\n\nerror011\n\n\nCustomer Reference Account locked\n\n\n\n\n\n\nerror012\n\n\nInvalid Amount\n\n\n\n\n\n\nerror013\n\n\nAmount insufficient\n\n\n\n\n\n\nerror014\n\n\nAmount too high. Try a smaller amount\n\n\n\n\n\n\nerror015\n\n\nAmount too low. Try a larger amount\n\n\n\n\n\n\nerror016\n\n\nInvalid payment\n\n\n\n\n\n\nerror100\n\n\nGeneral Error\n\n\n\n\n\n\nerror111\n\n\nRetry condition. No response\n\n\n\n\n\n\nOther Error\n\n\nAs per agreement with partner, during integration\n\n\n\n\n\n\n\n\nAccount to Wallet\n\n\nPartner to TIGO (Transfer amount from Partner's TigoPesa Disbursement account to subscriber's TIGOPESA wallet through Payment Gateway) \u2013 Synchronous\n\n\nInput to the Payment Gateway System from the Partner Application \u2013 'MFI CashIn' API Request\n\n\n\n\n\n\n\n\nField\n  \nname\n\n\nMax-\u00ad\u2010length\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nTYPE\n\n\n10\n\n\nThe request type of the transaction.The value will be constant in all the request. Ex -\u00ad\u2010 REQMFICI\n\n\n\n\n\n\nREFERENCEID\n\n\n20\n\n\nA value consisting of combination of alphanumeric characters tha uniquely identifies each request made by the MFI Server. This value has to be provided by the MFI Server and a combination of the TYPE and REFERENCEID field has to be unique. Ex -\u00ad\u2010 CI000000000000000001 Note: Maximum allowed length for this element is restricted to '20'.\n\n\n\n\n\n\nMSISDN\n\n\n12\n\n\nPayer MSISDN. This can should be with country code. Ex \u2013 255721777777 Note: The MSISDN of Partner disbursement account in TIGOPESA has to be passed in the request.\n\n\n\n\n\n\nPIN\n\n\n4\n\n\nNumeric or alphanumeric. Ex \u2013 1456 Note: The PIN of the Partner disbursement account in TIGOPESA has to be passed in the request.\n\n\n\n\n\n\nMSISDN1\n\n\n10/12\n\n\nPayee MSISDN should be with/without country code. Ex \u2013 0721151515 Note: The MSISDN of the subscriber's account in TIGOPESA has to be passed in the request.\n\n\n\n\n\n\nAMOUNT\n\n\n10\n\n\nNumeric Only. Should not accept amount in decimal points because there is no support for cents. Ex -\u00ad\u2010 1000\n\n\n\n\n\n\nLANGUAGE1\n\n\n2\n\n\nPayer Language Ex -\u00ad\u2010 en\n\n\n\n\n\n\n\n\nSample request message from the Partner application to the Payment Gateway (MFI CashIn API) is here.\n\n\n?xml version=\n1.0\n?\n\n  \nCOMMAND\n\n  \nTYPE\nREQMFICI\n/TYPE\n\n  \nREFERENCEID\nREFERENCEID\n/REFERENCEID\n\n  \nMSISDN\nMFI-\u00ad\u2010MSISDN\n/MSISDN\n\n  \nPIN\nMFI-\u00ad\u2010PIN\n/PIN\n\n  \nMSISDN1\nSUBS-\u00ad\u2010MSISDN\n/MSISDN1\n\n  \nAMOUNT\nAMOUNT\n/AMOUNT\n\n  \nLANGUAGE1\nLANGUAGE-\u00ad\u2010CODE\n/LANGUAGE1\n\n  \n/COMMAND\n\n\n/xml\n\n\n\n\n\nOutput from the Payment Gateway System to the Partner Application\n\n' \nMFI CashIn' API Response\n\n\n\n\n\n\n\n\nField\n  \nname\n\n\nMax-\u00ad\u2010length\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nTYPE\n\n\n10\n\n\nResponse Type. The value will be constant in all the response. Ex -\u00ad\u2010 RESMFICI\n\n\n\n\n\n\nREFERENCEID\n\n\n20\n\n\nThe same value that is contained in the REFERENCEID tag of the Request XML. Partner Application generated Transaction ID. Ex -\u00ad\u2010 CI000000000000000001 Note: Maximum allowed length for this element is restricted to '20'.\n\n\n\n\n\n\nTXNID\n\n\n20\n\n\nTigo Pesa Transaction ID for the Cash-\u00ad\u2010In Transaction. Ex -\u00ad\u2010 42326232\n\n\n\n\n\n\nTXNSTATUS\n\n\n5\n\n\nVarious transaction status Failed, Success etc. Ex \u2013 200 or 0 for success\n\n\n\n\n\n\nMESSAGE\n\n\nNA\n\n\nResponse message. Ex -\u00ad\u2010 Success\n\n\n\n\n\n\n\n\nSample response message from the Payment Gateway System to Partner Application 'MFI CashIn' API is here.\n\n\n?xml version=\n1.0\n?\n\n  \nCOMMAND\n\n  \nTYPE\nRESMFICI\n/TYPE\n\n  \nREFERENCEID\nREFERENCEID\n/REFERENCEID\n\n  \nTXNID\n42326232\n/TXNID\n\n  \nTXNSTATUS\n200\n/TXNSTATUS\n\n  \nMESSAGE\nSuccess\n/MESSAGE\n\n  \n/COMMAND\n\n\n/xml\n\n\n\n\n\nNote: 1. In case of Fail response from Tigo Pesa, TXNID (Tigo Transaction ID) element in the response will be empty.\n\n\nThe following are the list of possible \nTXNSTATUS\n codes and description:\n\n\n\n\n\n\n\n\nTXNSTATUS\n\n\nMESSAGE\n\n\n\n\n\n\n\n\n\n\n00026\n\n\nPIN expired. Please change your PIN.\n\n\n\n\n\n\n00031\n\n\nRequested amount more then allowed in the network\n\n\n\n\n\n\n00042\n\n\nRequested amount not in multiple of allowed value\n\n\n\n\n\n\n317\n\n\nUnable to complete transaction as recipient A/c is barred. Error code 00317.\n\n\n\n\n\n\n410\n\n\nUnable to complete transaction as amount is more than the maximum limit. Error code: 00410.\n\n\n\n\n\n\n2117\n\n\nUnable to complete transaction as sender A/c is barred. Error code 02117. 200 or 0  Success\n\n\n\n\n\n\n60014\n\n\nUnable to complete transaction as maximum transaction value per day for payer reached. Error code 60014.\n\n\n\n\n\n\n60017\n\n\nUnable to complete transaction as transaction amount is less than the minimum txn value for sender. Error code 60017.\n\n\n\n\n\n\n60018\n\n\nUnable to complete transaction as amount is more than the maximum limit. Error code 60018.\n\n\n\n\n\n\n60019\n\n\nUnable to complete transaction as account would go below minimum balance. Error code 60019.\n\n\n\n\n\n\n60021\n\n\nUnable to complete transaction as maximum number of transactions per day for Payee was reached. Error code 60021.\n\n\n\n\n\n\n60024\n\n\nUnable to complete transaction as maximum transaction value per day reached. Error code 60024.\n\n\n\n\n\n\n60028\n\n\nUnable to complete transaction as transaction amount is more than the maximum txn value for recipient. Error code 60028.\n\n\n\n\n\n\n60030\n\n\nUnable to complete transaction as the Payee account would go above maximum balance. Error code: 60030.\n\n\n\n\n\n\n60074\n\n\nPayee Role Type Transfer Profile not defined This is generic error, which is returned if problem happen during transaction\n\n\n\n\n\n\n100\n\n\nprocessing. Partner should put transaction amount in HOLD state to avoid risk of rollback while amount was disbursed. This is the same case for any kind of timeout as well. Other Error", 
            "title": "Partner Integration Guide"
        }, 
        {
            "location": "/partner_integration/#api-details", 
            "text": "The transport protocol of this interface is XML over HTTP.  The expected HTTP method is always POST.  The expected headers in the request   response are  'Content-\u00ad\u2010type'   'Connection'.", 
            "title": "API Details"
        }, 
        {
            "location": "/partner_integration/#request-xml", 
            "text": "A request to perform a function is sent using the COMMAND element.   POST   HTTP   Content-\u00ad\u2010type: text/xml   Connection: keep-\u00ad\u2010alive   ?xml version= 1.0 ? \n   COMMAND \n  -\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010\n  -\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010\n  -\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010\n   /COMMAND  /xml", 
            "title": "Request XML"
        }, 
        {
            "location": "/partner_integration/#response-xml", 
            "text": "The response to a request to perform a function uses the COMMAND element.  HTTP/1.1 200 OK  Content-\u00ad\u2010type: text/xml  Connection: close  ?xml version= 1.0 ? \n   COMMAND \n  -\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010\n  -\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010\n  -\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010-\u00ad\u2010\n   /COMMAND  /xml   Partner Integration (A2W   W2A) API Details   Use Case 1: Wallet to Account / TIGO to Partner (Pay amount from Subscriber's TIGOPESA wallet to Partner Collection account through Payment Gateway) \u2013 Synchronous  Input to the Partner Application from the Payment Gateway \u2013 SYNC_BILLPAY_API Request     Field    name  Max-\u00ad\u2010length  Description      TYPE  NA  The request type of the transaction. The valuewill be constant in all the request. Ex -\u00ad\u2010 SYNC_BILLPAY_REQUEST    TXNID  20  Alphanumeric-\u00ad\u2010This field will be Tigo transaction ID. It will be unique for all transactions. Ex -\u00ad\u2010 BP140218.1240.B01530    MSISDN  10/12  Payer MSISDN should be without country code. Ex \u2013 0721777777 or 255721777777    AMOUNT  NA  Numeric, Ex -\u00ad\u2010 1000    COMPANYNAME  6  Numeric. This is the business number, or biller code Ex \u2013 12345    CUSTOMERREFERENCEID  50  Bill pay reference number, normally generated/shared by partner application. This is used by partner application to validate payments. Alphanumeric characters.Ex \u2013 T1234ABC     Sample request message from the Payment Gateway to Partner Application 'SYNC_BILLPAY_API' is here.  ?xml version= 1.0 ? \n   COMMAND  \n     TYPE SYNC\\_BILLPAY\\_REQUEST /TYPE \n     TXNID tigo\\_txnID /TXNID \n     MSISDN user\\_msisdn /MSISDN \n     AMOUNT amount /AMOUNT \n     COMPANYNAME copny\\_ID /COMPANYNAME \n     CUSTOMERREFERENCEID Partner\\_reference\\_number /CUSTOMERREFERENCEID \n   /COMMAND  /xml   Output from the Partner Application to the Payment Gateway System \n\u2013  SYNC_BILLPAY_API Response     Field    name  Max-\u00ad\u2010length  Description      TYPE  NA  The response type of the transaction. The value will be constant in all the response. Ex \u2013 SYNC_BILLPAY_RESPONSE    TXNID  20  Tigo Transaction ID sent in the request. Ex -\u00ad\u2010 BP140218.1240.B01530    REFID  50  Partner Application generated Transaction ID. It should be unique for all transaction.Ex -\u00ad\u2010 000217605331    RESULT  2  Status of the transaction. String value. Ex \u2013 Either TS or TF    ERRORCODE  20  Particular Error Code returned in the transaction. Will be Alphanumeric.Ex -\u00ad\u2010 error000 for success    ERRORDESCRIPTION  NA  Error Description (String). Ex-\u00ad\u2010 Transaction Successful    MSISDN  10  Numeric -\u00ad\u2010 Subscriber (Payer) phone number Ex \u2013 0656856028    FLAG  1  String value.Ex \u2013 Either Y or N    CONTENT  NA  Alphanumeric field may be present under this field Maximum 140 characters No special characters like pipe('     Sample response message from the Partner Application to the Payment Gateway 'SYNC_BILLPAY_API' is  ?xml version= 1.0 ? \n   COMMAND TYPE SYNC\\_BILLPAY\\_RESPONSE /TYPE \n   TXNID BP140218.1240.B01530 /TXNID \n   REFID 000217605331 /REFID \n   RESULT TS /RESULT \n   ERRORCODE error000 /ERRORCODE \n   ERRORDESC/ \n   MSISDN 0714405395 /MSISDN \n   FLAG Y /FLAG \n   CONTENT message\\_content. /CONTENT \n   /COMMAND  /xml   The following are the list of expected  ERRORCODE  and its description from Partner Application:     Error Code  Description      error000  Successful transaction    error001  Service not available    error010  Invalid Customer Reference Number    error011  Customer Reference Account locked    error012  Invalid Amount    error013  Amount insufficient    error014  Amount too high. Try a smaller amount    error015  Amount too low. Try a larger amount    error016  Invalid payment    error100  General Error    error111  Retry condition. No response    Other Error  As per agreement with partner, during integration", 
            "title": "Response XML"
        }, 
        {
            "location": "/partner_integration/#account-to-wallet", 
            "text": "Partner to TIGO (Transfer amount from Partner's TigoPesa Disbursement account to subscriber's TIGOPESA wallet through Payment Gateway) \u2013 Synchronous  Input to the Payment Gateway System from the Partner Application \u2013 'MFI CashIn' API Request     Field    name  Max-\u00ad\u2010length  Description      TYPE  10  The request type of the transaction.The value will be constant in all the request. Ex -\u00ad\u2010 REQMFICI    REFERENCEID  20  A value consisting of combination of alphanumeric characters tha uniquely identifies each request made by the MFI Server. This value has to be provided by the MFI Server and a combination of the TYPE and REFERENCEID field has to be unique. Ex -\u00ad\u2010 CI000000000000000001 Note: Maximum allowed length for this element is restricted to '20'.    MSISDN  12  Payer MSISDN. This can should be with country code. Ex \u2013 255721777777 Note: The MSISDN of Partner disbursement account in TIGOPESA has to be passed in the request.    PIN  4  Numeric or alphanumeric. Ex \u2013 1456 Note: The PIN of the Partner disbursement account in TIGOPESA has to be passed in the request.    MSISDN1  10/12  Payee MSISDN should be with/without country code. Ex \u2013 0721151515 Note: The MSISDN of the subscriber's account in TIGOPESA has to be passed in the request.    AMOUNT  10  Numeric Only. Should not accept amount in decimal points because there is no support for cents. Ex -\u00ad\u2010 1000    LANGUAGE1  2  Payer Language Ex -\u00ad\u2010 en     Sample request message from the Partner application to the Payment Gateway (MFI CashIn API) is here.  ?xml version= 1.0 ? \n   COMMAND \n   TYPE REQMFICI /TYPE \n   REFERENCEID REFERENCEID /REFERENCEID \n   MSISDN MFI-\u00ad\u2010MSISDN /MSISDN \n   PIN MFI-\u00ad\u2010PIN /PIN \n   MSISDN1 SUBS-\u00ad\u2010MSISDN /MSISDN1 \n   AMOUNT AMOUNT /AMOUNT \n   LANGUAGE1 LANGUAGE-\u00ad\u2010CODE /LANGUAGE1 \n   /COMMAND  /xml   Output from the Payment Gateway System to the Partner Application \n'  MFI CashIn' API Response     Field    name  Max-\u00ad\u2010length  Description      TYPE  10  Response Type. The value will be constant in all the response. Ex -\u00ad\u2010 RESMFICI    REFERENCEID  20  The same value that is contained in the REFERENCEID tag of the Request XML. Partner Application generated Transaction ID. Ex -\u00ad\u2010 CI000000000000000001 Note: Maximum allowed length for this element is restricted to '20'.    TXNID  20  Tigo Pesa Transaction ID for the Cash-\u00ad\u2010In Transaction. Ex -\u00ad\u2010 42326232    TXNSTATUS  5  Various transaction status Failed, Success etc. Ex \u2013 200 or 0 for success    MESSAGE  NA  Response message. Ex -\u00ad\u2010 Success     Sample response message from the Payment Gateway System to Partner Application 'MFI CashIn' API is here.  ?xml version= 1.0 ? \n   COMMAND \n   TYPE RESMFICI /TYPE \n   REFERENCEID REFERENCEID /REFERENCEID \n   TXNID 42326232 /TXNID \n   TXNSTATUS 200 /TXNSTATUS \n   MESSAGE Success /MESSAGE \n   /COMMAND  /xml   Note: 1. In case of Fail response from Tigo Pesa, TXNID (Tigo Transaction ID) element in the response will be empty.  The following are the list of possible  TXNSTATUS  codes and description:     TXNSTATUS  MESSAGE      00026  PIN expired. Please change your PIN.    00031  Requested amount more then allowed in the network    00042  Requested amount not in multiple of allowed value    317  Unable to complete transaction as recipient A/c is barred. Error code 00317.    410  Unable to complete transaction as amount is more than the maximum limit. Error code: 00410.    2117  Unable to complete transaction as sender A/c is barred. Error code 02117. 200 or 0  Success    60014  Unable to complete transaction as maximum transaction value per day for payer reached. Error code 60014.    60017  Unable to complete transaction as transaction amount is less than the minimum txn value for sender. Error code 60017.    60018  Unable to complete transaction as amount is more than the maximum limit. Error code 60018.    60019  Unable to complete transaction as account would go below minimum balance. Error code 60019.    60021  Unable to complete transaction as maximum number of transactions per day for Payee was reached. Error code 60021.    60024  Unable to complete transaction as maximum transaction value per day reached. Error code 60024.    60028  Unable to complete transaction as transaction amount is more than the maximum txn value for recipient. Error code 60028.    60030  Unable to complete transaction as the Payee account would go above maximum balance. Error code: 60030.    60074  Payee Role Type Transfer Profile not defined This is generic error, which is returned if problem happen during transaction    100  processing. Partner should put transaction amount in HOLD state to avoid risk of rollback while amount was disbursed. This is the same case for any kind of timeout as well. Other Error", 
            "title": "Account to Wallet"
        }
    ]
}